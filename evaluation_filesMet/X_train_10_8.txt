Here  , graph equality means isomor- phism. Then  , k-Bisimk-Bisim ref G = k- BisimG. Where TSV means Term Selection Value that is used to rank terms. k 4 '  ,k 5   , k 6 are parameters. a variable for the solving method. are free of aT  , a u k k f z means of %'-configuration vectors. it contains only diagonal elements. For the constant elasticity case this means that K J = diag{K J ,i }  , i.e. Steady trending means a good performance on model robustness. a set K=100  , and b set K=200. A smaller k value means that the expanded query terms are less important. Finally we decide to apply k=1 and k=0.75 respectively. We now examine the bid variation in accounts. The means bj of the ad groups in a campaign k are themselves drawn from a normal distribution with mean b k   , and the campaign means are normal with mean b h : ∩ f k − → r  , which describe the training data by means of feature-relevance associations. . That means a cloned h-fragment of a k-fragment must have its size h in the range This implies kσ ≤ h ≤ k/σ. Figure 1 depicts the investigated scenario. where c i c k means that c i is related to c k through a subsumption relationship. The extra cost incurred by this extension involves storing additional information. This means that there exists a 0 k such that u k is not contained in A;. As we increase σ k   , the performance in both Figure first increases and thereafter declines slightly. The larger σ k means the model has more tively. Thus the complexity of computing one context-aware rating is exponential in the number of modes and polynomial in the number of factors. k := k l   , this means a computational complexity of Ok m . Figure 5shows the experimental results. We also use the Suc@k which means that percentage of queries for which at least one relevance result is ranked up to position k including k. K w : This database models the plan-time effects of sensing actions with binary outcomes. K f can include any ground literal   , where ∈ K f means " the planner knows . " K- Means will tend to group sequences with similar sets of events into the same cluster. , as a distance metric. By changing the parameter k  , we can realize the variable viscosity elements. The above equation directly means the viscosity. This means that blog posts are modeled using a single QLM. We set the baseline using K = 1. This means that for k quality attributes  , Note that values 2  , 4  , 6  , and 8 represent compromises between these preferences. Intuitively this means that some classification information is lost after C  , is eliminated. tl  , t k are still distingusable. Standalone localization means that each robot estimates its position using its exteroceptive sensors data collected from the fixed beacons located in the evolution area. x 1 ,k  ,y 1 ,k  and x 2 ,k  ,y 2 ,k  are the positions of robots 1 and 2 at each instant k and i b 1 . between the power of a matrix and its spectral information e.g. Then we can obtain W k x = λ k x  , which means W k has the same eigenvector as W and the k-th power of the same eigenvalue λ k . Schematically  , preservation means that the state of ω stays within the same ≡ I -equivalence class. Formally  , preserving ω with respect to an interpretation I means that for each t  , 0 ≤ t ≤ k  , we have Is t  = Is 0 . O having overlapping sources of inconsistencies means that K ∩ K = ∅. – Overlapping: there are more than one set of axioms that are needed to produce an inconsistency in an ontology and they are interweaved with one another. When two sets of inconsistent axioms are overlapping  , it indicates that certain axioms contribute more to the inconsistencies and these axioms are possibly more problematic than others. Virtual targets are predicted using input-output maps implemented efficiently by means of a k-d tree short for k-dimensional tree a  , 91. Especially  , we focus on self improvement in the task performance. This implies that M F k is also aperiodic and together with irreducibility this means that M F k is ergodic. Moreover  , there are non-zero selfloop probabilities for every state. This can be seen based on the following two observations: The rationale behind these operations is that the K-γoverlap graph of P can be transformed into the K-γ-overlap graph of p by means of these operations. As mentioned earlier  , X k ,j denotes the corresponding user feature vector. Thus  , y kj = 1 implies user k converted on campaign j while y kj = 0 means she did not. Put simply  , the private data set is modified so that each record is indistinguishable from at least k − 1 other records. K-anonymity 24  , 25  , 26  , 29  , 30  has been proposed as a means to preserving privacy in data releases. This means that our current implementation only approximates the top-k items. Also note the current top-k bag-of-words approach shown in GREEDY-TAAT is based entirely on the frequency counts of each item. This means that we would do EA_LB_Keogh 2k-1 times  , without early abandoning. Imagine that we might have chosen W with size of K = 1  , and the query Q is within r of all k candidates. Variable reduction is illustrated in example 3. A value k of variable b i means there are k transactions from equivalence class i in the tidset  , hence it is constrained to be at most the number of variables it substitutes. are non-negative  , it means there is a solution for candidate migration. Here S K i is denotes the amount o f k-itemsets for node i to send out. This means that there are less than k objects in our constrained region. We should also note what happens when there are less than k optimal answers in the data set. The repetitive controller then try to cancel this non-periodic disturbance after one period in order to bring E r k to zero. This means that the signal E r k still contains the effect of the non-periodic disturbance. This means that the user has seen at least 3 different values for the same d − k combination key and potential tracker respectively. In the current configuration  , k l is 3 and t l is 7 days. Clustered multi-index. This means that we only need to check clusters whose keys have a Hamming distance in the range HQ  , P −k  , HQ  , P +k namely  , clusters Cj with We can observe that the prediction accuracy increases first when k increases and then becomes stable or even slightly decreases when k > 30 for all three groups of experiments. Here legend Src+Target means using both source graph edges and labeled target graph edges without instance weighting  , and IW means our instance weighting method. Mandelbrot noticed extreme variability of second empirical moments of financial data  , which could be interpreted as nonexistence of the theoretical second moments  , i.e. Initially attention was focused on the Lindeberg condition which in more broad sense means that 1 is not dominated by any finite number increments ΔS k and in particular  , when increments are identically distributed  , it means V ΔS k  < ∞. This means that This means that the descendants of v h share at least a node with the descendants of v k but they do not belong to the same subtree. Such collections of values give anonymity to secret associations. Roughly speaking  , k-anonymity means that one can only be certain that a value is associated with one of at least k values. In the final  , a single point pi of the calligraphic character can be represented as a 32 dimensional vector. wik means the number of points that located in the k-th bin. At execution time  , the planner will have definite information about f 's value. K v can contain any unnested function term f   , where f ∈ K v means that at plan time the planner " knows the value of f . " Compared with the baseline  , the performances for all K > 1 were significantly improved  , and the best performance was obtained when using K = 500. This fact means that these two categories are strongly connected to haptic information  , and granularities of these categories are different. K = 2 for a and K = 10 for b  , are used. by the means ofˆcofˆ ofˆc i and T k   , before being projected into the corresponding image. : the featurê y j must first be transformed into the coordinate frame of the i th keyframe of camera k  , i.e. That means as long as the cut-point k 1 is within the tolerance range we consider the term as similar  , outside the tolerance range it is dissimilar. 10% of k 1 . In this section we discuss the notion of k-anonymity in an intuitive manner and provide some reasons why it is nontrivial to check releasing views for k-anonymity violation. It means that outside users can never make sure which one of k property values an entity e is certainly associated with  , except when they are be able to exclude k − 1 values from them using some external knowledge . By definition  , if a view set does not violate k-anonymity  , any of its association covers must have at least k associations in it. This means we can only include targets for which our methods find at least K source candidates which naturally shrinks the set of test targets. , K. We first calculate the K precision values for each target separately and then compute the aggregate value for each k by averaging over all targets. The above EM procedure is ensured to converge  , which means that the log-likelihood of all observed ratings given the current model estimate is always nondecreasing. where U k   , S k   , and V k are matrices composed of the top k left singular vectors  , singular values  , and right singular vectors  , respectively. The value of Qo is similarly an increasing function of K which in this case means that as K increases the range of batch sizes over which the GS policy is more desirable increases. The value of p o is an increasing function of K so that the range of utilizations over which the GS policy is more desirable increases as K decreases. This result corresponds to the feature as mentioned in Section 4.1. This means that this k e d point is saddle-type and unstable. The vector of parameters to be optimised is given byˆP by the means ofˆcofˆ ofˆc i and T k   , before being projected into the corresponding image. This section is divided into four subsections. This just means that the mask update rate would be slower than the object localization update r a k . That means watermarking object should have the largest number of 16xl6 macro blocks. We select the most important blocks set with the maximum k as watermarking objects. which means that after k control steps the signal reaches the confidence zone. The controlled system's transfer function under perturbation becomes: When k increases  , the optimal b becomes negative . This means that diversifying top-10 search results reduces the risk of not returning any relevant documents. This means that RCDR successfully preserved information useful for estimating target orders. The difference was particularly clear when the number of dimensions K was small. The second parameter to be tested is the opinion similarity function. However  , this optimization can lead to starvation of certain types of transactions. The carry-over optimization can yield substantial reductionq in the number of lock requests per transaction . The optimization for some parts yield active constraints that are associated with single-point contact. Active constraints prevent µ max from being further increased by the optimization. to increase efficiency or the field's yield  , in economic or environmental terms. These data should be used for optimization  , i.e. The optimization problem presented in Section II is strongly limited by local mimima see Section IV-B for examples. Subsequently  , the starting parameters which yield the best optimization result of the 100 trials is taken as global optimium. It is applicable to a variety of static and dynamic cost functions   , such as distance and motion time. It combines a global combinatorial optimization in the position space with a local dynamic optimization to yield the global optimal path. The search for the optimal path follows the method presented in lo. For some scenarios  , our strategies yield provably optimal plans; for others the strategies are heuristic ones. We present optimization strategies for various scenarios of interest. Otherwise  , the resulting plans may yield erroneous results. Furthermore  , many semantic optimization techniques can only be applied if the declarative constraints are enforced. A notification protocol waq designed to handle this case. The optimization for some parts yield active constraints that are associated with two-point contact. These parts tend to be shorter. Why this popular approach does not often yield the least deviation is explained by example. Section 2 addresses the drawback of the least-square optimization. The optimization yields the optimal path and exploits the available kinematic and actuator redundancy to yield optimal joint trajectories and actuator forces/torques. A finite-difference method is used to solve the boundary value problem. Other  , more sophisticated IBT approaches using the maximum subsequence optimization may still yield improvement  , but we leave this as future work. by assigning a high score to a token outside the article text. In this paper  , only triangular membership functions are coded for optimization. In this representation   , even though  , the GA might come up with two fit individuals with two competing conventions  , the genetic operators such aa crossover  , will not yield fitter individuals. Since this type of predictions involve larger temporal horizons and needs to use both the controller organization and modalities  , it may yield larger errors. The second group events e2 and e5 is related with the detection of maneuver optimization events. In 5 some numeric values for the components of the joint axis vectors and distance vectors to the manipulator tip were found  , for whiclr the Jacobian matrices have condition numbers of 1. Both optimization techniques yield very awkward designs. However  , they become computationally expensive for large manufacturing lines i.e. , when N is large. The recursive optimization techniques  , when applied to small manufacturing lines  , yield the solution with reasonable computational effort. ii it discards immediately irrelevant tuples. Then we use: The same optimization except for the absorption of new would yield a structuring scheme which creates objects only for lm aliases. The original query is transformed into syntactically different  , but semantically equivalent t queries  , which may possibly yield a more efficient execution planS. semantic integrity constraints and functional dependencies  , for optimization. Experimental results are presented in section 4 conclusions are drawn in section 5. Many optimization methods were also developed for group elevator scheduling. In general  , heuristic rules are not designed to optimize the performance  , and thus cannot consistently yield good scheduling results for various the traffic profiles. Reusing existing GROUP BY optimization logic can yield an efficient PIVOT implementation without significant changes to existing code. In addition to implementation simplicity  , viewing PIVOT as GROUP BY also yields many interesting optimizations that already apply to GROUP BY. As a consequence  , for a given problem the rule-based optimization always yield to the same set of solutions. Deterministic methods exploit heuristics which consider the component characteristics to configure the system structure 35. Semantic query optimization also provides the flexibility to add new information and optimization methods to an existing optimizer. This gives the opportunity of performing an individual  , " customized " optimization for both streams. The bypass technique fills the gap between the achievements of traditional query optimization and the theoretical potential   , In this technique  , specialized operators are employed that yield the tuples that fulfll the operator's predicate and the tuples that do not on two different  , disjoint output streams. In our case online position estimates of the mapping car can be refined by offline optimization methods Thrun and Montemerlo  , 2005 to yield position accuracy below 0.15 m  , or with a similar accuracy onboard the car by localizing with a map constructed from the offline optimization. The accuracy of the traffic light map is coupled to the accuracy of the position estimates of the mapping car. second optimization in conjunction with uces the plan search space by using cost-based heuristics. Que TwigS TwigStack/PRIX from 28  , 29 / ToXinScan vs. X that characterize the ce of an XML query optimizer that takes conjunction with two summary pruning ugmented with data r provides similar se of system catalog information in optimization strategy  ,   , which reduces space by identifying at contain the query a that suggest that  , can easily yield ude. 2 Performance stability: Caret-optimized classifiers are at least as stable as classifiers that are trained using the default settings. Since automated parameter optimization techniques like Caret yield substantially benefits in terms of performance improvement and stability  , while incurring a manageable additional computational cost  , they should be included in future defect prediction studies. Finally  , we would like to emphasize that we do not seek to claim the generalization of our results. Since automated parameter optimization techniques like Caret yield substantial benefits in terms of performance improvement and stability  , while incurring a manageable additional computational cost  , they should be included in future defect prediction studies. Our measurements prove that our optimization technique can yield significant speedups  , speedups that are better in most cases than those achieved by magic sets or the NRSU-transformation. We would also like to thank Isaac Balbin for his comments on previous drafts of this paper. The joint motion can be obtained by local optimization of a single performance criterion or multiple criteria even though local methods may not yield the best joint trajectory. Methods for resolving lixal redundancy determine joint trajectories from the instantaneous motion needed to follow a desired end-effector path. Some of them suppose a particular geometry planar or with three intersecting axes  , others a fixed kinematic joint type or general mobilities  or even no constraints in the optimization no obstacle avoidance for instance. Previous works based on this approach yield to interesting results but under restrictions on the manip ulator kinematics. The primary advantage over the implicit integration method of Anitescu and Potra is the lower running time that such alternative methods can yield  , as the results in Table Ican testify. The Moby simulation library uses the introduced approach to simulate resting contact for Newton  , Mirtich  , Anitescu- Potra  , and convex optimization based impact models among others. The method is based on looking at the kinematic parameters of a manipulator as the variables in the problem  , and using methods of constrained optimization to yield a solution. This paper has presented a binary paradigm in robotics and has developed one method for solving the problem of optimal design for pick-and-place tasks. This method consists of a hierarchical search for the best path in a tessellated space  , which is used as the initial conditions for a local path optimization to yield the global optimal path. V. CONCLUSIONS A method that obtains practically the global optimal motion for a manipulator  , considering its dynamics  , actuator constraints  , joint limits  , and obstacles  , has been presented in this paper. However  , this requires that the environment appropriately associate branch counts and other information with the source or that all experiments that yield that information be redone each time the source changes. Today's compilers are quite sophisticated and are capable of using performance information to improve optimization. Further research into query optimization techniques for Ad-Hoc search would be fruitful: this would also require an investigation into the trade offs with respect to effectiveness and efficiency found with such techniques. We need to investigate why longer Ad-Hoc queries in our system do not yield good retrieval effectiveness results. While this method works for relatively low degree-of-freedom manipulators  , there is a 'cross over' point beyond which the problem becomes overdetermined   , and an exact solution cannot be guaranteed. These benefits include verification of architectural constraints on component compositions  , and increased opporttmities for optimization between components. While this approach is not applicable to all software architectures  , it can yield benefits when applied to static systems  , and to static aspects of dynamic systems. In addition  , applications that use these services do not have the ability to pick and choose optional features  , though new optimization techniques may remove unused code from the application after the fact 35. These optional features can then be composed to yield a great variety of customized types for use in applications. Moreover  , a fixed point for each motion primitive By solving the optimization problem 15 for each motion primitive  , we obtain control parameters α * v   , v ∈ V R that yield stable hybrid systems for each motion primitive this is formally proven in 21 and will be justified through simulation in the next paragraph. To conclude with the above example  , suppose that we want to obtain the objects and not only the Definition attribute e.g. , to edit them. This is an important optimization since indeed the volumes in each time interval yield a sparse vector. Since an entity is not necessarily active at each time interval in the series it is possible to optimize Equation 2 such that T Si+1e will be dependent solely on the values of T Sje j ≤ i for which cje = 0. They are more suitable for real-time control in a sensor-based control environment. In order to verify that the optimization results do indeed yield a gear box mechanism that produces in-phase flapping that is maintained even during asymmetric wing motion  , a kinematic evaluation was conducted by computational simulation and verified by experiment. Delrin and ABS plastics were used to fabricate the frame and links. Now  , the optimization problem reduces to estimating the coefficients by maximizing the log-posterior which is the sum of the log-likelihood Eq. In all our experiments  , we fix σ 2 = 9; experiments with several other values in the range of 3 to 20 did not yield much difference. It eliminates the main weakness of the NRSU-transformation: it works even when input arguments are variables  , not constants   , and hence it can be applied to far more calls in deductive database programs. Subsequent optimization steps then work on smaller subsets of the data Below  , we briefly discuss the CGLS and Line search procedures. This also allows additional heuristics to be developed such as terminating CGLS early when working with a crude starting guess like 0  , and allowing the following line search step to yield a point where the index set jw is small. The final results show Q2 being used for root-finding instead of optimization. It needed 76 evaluations  , but the chosen optimum had a yield below 10 units: worse than all the other methods  , indicating that the assumption of a global quadratic is inadequate in this domain. By solving the optimization problem 15 for each motion primitive  , we obtain control parameters α * v   , v ∈ V R that yield stable hybrid systems for each motion primitive this is formally proven in 21 and will be justified through simulation in the next paragraph. Due to space constraints  , we refer the reader to 12 for further details. The multitask case was thought to be more demanding because more obstacles and paths must be accommodated using the same  , limited parameter space that was used individual task optimization  , meaning that the number of well fit solutions should decrease markedly. In this vein  , optimizing over this group of tasks concurrently should yield another unique  , optimal morphology. Since optimization of queries is expensive   , it is appropriate that we eliminate queries that are not promising  , i.e. , not likely to yield an optimal plan. Pruuiug the set of Equivalent Queries: The set  , of rquivalent queries that are generated by gen-closure are considered by the cost-based optimizer to pick t ,he optimal plan. The following table lists all combinations of metric and distance-combining function and indicates whether a precomputational scheme is available ++  , or  , alternatively   , whether early abort of distance combination is expected to yield significant cost reduction +: distance-combining func But IO-costs dominate with such queries  , and the effect of the optimization is limited. However  , to increase opportunities for optimization   , all AQ i are combined into one audit query AQ whose output is a set of query identifiers corresponding to those AQ i that yield non-empty results. If we were to execute these AQ i queries  , those with non-empty results will comprise the exact set of suspicious queries. In contrast  , last criterion   , which is typical of schemes generally seen in the robotics literature  , yields analytical expressions for the trajectory and locally-optimal solutions for joint rates and actuator forces. To overcome this problem  , we run the optimization for a given target trajectory for 100 times  , using different initial guesses for the starting parameters  , chosen with the following procedure: a robot configuration θ is defined randomly  , within the range of allowed values; a trajectory is determined as a straight line between the given initial and the randomly defined configuration  , by algebraic computations of the B-spline parameters; these latter parameters are taken as initial guess. Autonomic computing is a grand challenge  , requiring advances in several fields of science and technology  , particularly systems  , software architecture and engineering  , human-system interfaces  , policy  , modeling  , optimization  , and many branches of artificial intelligence such as planning  , learning  , knowledge representation and reasoning  , multiagent systems  , negotiation  , and emergent behavior. Realizing the vision of autonomic computing is necessarily a worldwide cooperative enterprise  , one that will yield great societal rewards in the near-term  , medium-term and long-term. Our results lead us to conclude that parameter settings can indeed have a large impact on the performance of defect prediction models  , suggesting that researchers should experiment with the parameters of the classification techniques . The rationale of using M codebooks instead of single codebook to approximate each input datum is to further minimize quantization error  , as the latter is shown to yield significantly lossy compression and incur evident performance drop 30  , 3. As the binary constraints are directly imposed to the learning objective and are valid throughout the optimization procedure  , the derived binary codes are much more accurate than sign thresholding binary codes. It is no surprise that the speedup of PRIX over due to the use of a full index  , ToXinSca dups depe the query. the necessary hard constraints have been applied to yield a feasible solution space defined on the PCM  , any path on the PCM  , from the point corresponding to the initial position of the robot to a point on the T G S   , will give rise to a valid solution for the interception problem. T h e P C M framework has the advantage that it allows a variety of optimization criteria t o be expressed in a unified manner so that the optimal sensorbased plan can be generated for interception. will not yield an autonomic computing system unless the elements share a set of common behaviors  , interfaces and interaction patterns that are demonstrably capable of engendering system-level selfmanagement . This work explores and validates the architecture by means of an autonomic data center prototype called Unity that employs three design patterns: a selfconfiguration design pattern for goal-driven self assembly  , a selfhealing design pattern that employs sentinels and a simple cluster re-generation strategy  , and a self-optimization design pattern that uses utility functions to express high-level objectives. Experiments on three real-world datasets demonstrate the effectiveness of our model. Our approach constructs an item group based pairwise preference for the specific ranking relations of items and combine it with item based pairwise preference to formalise a novel framework PRIGPPersonalized Ranking with Item Group based Pairwise preference learning . Noting that our work provides a framework which can be fit for any personalized ranking method  , we plan to generalize it to other pairwise methods in the future. The experimental results on three real-world datasets show our proposed method performs a better top-K recommendation than baseline methods. Path finding and sub-paths in breadth-first search 3. Neither pattern is a true depth-first or breadthfirst search pattern. The greedy pattern represents the depth-first behavior  , and the breadth-like pattern aims to capture the breadth-first search behaviors. To be efficient and scalable  , Frecpo prunes the futile branches and narrows the search space sharply. The depth-first search instead of the breadth-first search is used because many previous studies strongly suggest that a depth-first search with appropriate pseudo-projection techniques often achieves a better performance than a breadth-first search when mining large databases. Here we use breadth-first search. Once the search space is structured  , a search strategy should be chosen. 6  holds the objects during the breadth-first search. 4first out queue called Q in Fig. In practice  , forward selection procedures can be seen as a breadth-first search. 10 . In the mathematical literature  , breadth first search Is typically preferred. Normally the user cares "~. , ,:"~ ,~ton ~v'" ""-. and search the other subranges breadth-first. For our implementation we select for a solution path using a standard method such as breadth-first search. Thus solving the graph search problem in Given the user behavior observed by Klöckner et al. , we used two browsing patterns to evaluate find-similar.   , vn−1}  , where the indices are consistent with a breadth-first numbering produced by a breadth-first search starting at node v0 1 see Section 3.4.1 for a formal definition. By a depth-first search of the set enumeration tree of transitive reductions of partial orders  , Frecpo will not miss any frequent partial order. In enumerative strategies  , several states are successively inspected for the optimal solution e.g. , by breadth-first  , best-first or depth-first search. If its implementation is such that the least recent state is chosen  , then the search strategy is breadth-first. We first conduct a breadth-first or depth-first search on the graph. We will deal with these cycles in the next step. However  , best-first search also has some problems. Clearly  , best-first search has advantages over breadth-first search because it " probes " only in directions where relevant pages locate and avoids visiting irrelevant pages. We compute the discrete plan as a tree using the breadth first search. robot and obstacles 12. Tabels 1 and 2 show that the breadth first search is exhaustive it finds solutions with one step fewer re- grasps. the search procedure is breadth first search which examines all the nodes on one level of the tree before any nodes of the next level ignoring the goal distance Ac. This will not always be feasible in larger domains  , and intelligent search heuristics will be needed. This amounts to a breadth first search of the frequent itemsets on a lattice. Apriori first finds all frequent itemsets of size § before finding frequent itemsets of size § ¦ . CLOSET 11 and CLOSET+ 16 adopt a depth-first  , feature enumeration strategy. A-close 10 uses a breadth-first search to find FCPs. We restrict the training pages to the first k pages when traversing the website using breadth first search. Thus  , we should use these pages for training as well. A sample top-down search for a hypothetical hierarchy and query is given in Figure 2. In practice  , it is closer to a depth-first search with some backtracking than to a breadth-first search. This simple method worked out well in our experiments. ; the maximal number of states between the initial state and another state when traversing the TS in breadth-first search BFS height; the number of transitions starting from a state and ending in another state with a lower level when traversing the TS in breadth-first search Back lvl tr. deg. The resulting path will have the minimum nilinher of turns i n it by definition of breadth-first search. Compute D and perform a breadth-first search of D as indicated above starting with To as the set of visited vertices and ending when some vertex in the goal set 7~ ha5 been reached. During our previous experiments 13  , a bidirectional breadth first search proved to be the most efficient method in practice for finding all simple paths up to certain hop limit. The path iterator  , necessary for path pattern matching  , has been implemented as a hybrid of a bidirectional breadth-first search and a simulation of a deterministic finite automaton DFA created for a given path expression. The breadth-first search weighted by its distance from the reference keyframe is performed  , and the visited keyframes are registered in the temporary global coordinate system. To optimize the poses and landmarks  , we create a metric environment map by embedding metric information to nodes by breadth-first search over graph. The objects in UpdSeedD ,l are not directly density-reachable from each other. Thus  , a breadth-first search for the missing density-connections is performed which is more efficient than a depth-first search due to the following reasons: l Johnson generalized it to other surface representations  , including NURBS  , by using a breadth-first search 9. Quinlan introduced this approach using a depth-first search of the bounding hierarchy  141. Since coverage tends to increase with sequence length  , the DFS strategy likely finds a higher coverage sequence faster than the breadth-first search BFS. We choose to traverse the tree using depth-first search DFS. This is done by recursively firing co-author search tactics. is done by performing a breadth-first search that considers all successor vertices of a given vertex first before expanding further. Then  , we navigate in a breadth-first search manner through this classification. Note that this approach enables to consider ontologies more expressive than RDFS  , e.g. , OWL2DL. Two cases have to be distinguished. Starting from the two entities e 1 and e 2 the intersection tree is built using breadth-first search. Starting from a random public user  , we iteratively built a mutual graph of users in a Breadth First Search BFS manner. 2014. b Matched loop segments will be included in LBA as breadth-first search will active the keyframes. The fixed keyframes are selected based on a common landmark. Then we do breadth first search from the virtual node. To be more specific  , we add a virtual node which connects to all known nodes. The CWB searches for subject keywords through a breadth-first search of the tree structure. Subject keywords are nouns and proper nouns from a title or subtitle. It downloads multiple pages typically 500 in parallel. Its default download strategy is to perform a breadth-first search of the web  , with the following three modifications: 1. This is done by querying DBpedia's SPARQL endpoint for concepts that have a relation with the given concept. we perform a breadth first search. Therefore Lye have the following result. We generate plans that minimize worst-case length by breadth-first AND/OR search Akella  11. However there is no finite bound on the length of the plan. Then we compute the single source shortest path from y using breadth first search. In both cases a uniform random distribution is used. For each node visited do the following. Traverse the measure graph starting at m visiting all finer measures using breadth-first search. We augmented this base set of products  , reviews  , and reviewers via a breadth-first search crawling method. We call this the root dataset. For parts with different push functions  , a breadth-first search planner can be used to find a sensorless plan when one exists. We cannot recognize the parts hlowever. In a breadth-first search approach the arrangement enumeration tree is explored in a top-bottom manner  , i.e. This information  , however  , is not available in DFS. Each of the initial seed SteamIDs was pushed onto an Amazon Simple Queue Service SQS queue. The crawling was executed via a distributed breadth first search. Stopping criterion. We augment this base set of products  , reviews  , and reviewers via a breadth-first search crawling method to identify the expanded dataset. The SearchStrategy class hierarchy shown in Figure 6grasps the essence of enumerative strategies. Moreover  , breadth first search will find a shortest path  , whereas depth first makes no guarantees about the length of the counter example it will find. However  , if all violations go through a small set of nodes that are not encountered on the early selected paths or these nodes get stuck on the bottom of the worklist  , then it may be worse than breadth first search. In Section 3.6.1  , we show that breadthfirst search appears to be more efficient than depth-first search. We have chosen to search the LUB-tree hierarchy in a breadth-first manner  , as opposed to a depth-first search as in Quinlan 24 . If a crawl is started from a single seed  , then the order in which pages will be crawled tends to be similar to a breadth first search through the link graph 27 the crawl seldom follows pure breadth first order due to crawler requirements to obey politeness and robots restrictions . Discovery date. Although breadth-first search crawling seems to be a very natural crawling strategy  , not all of the crawlers we are familiar with employ it. Our results have practical implications to search engine companies. The experiments reported used a breadth first search till maximum depth 3 using the words falling in the synsets category. This affects the time spent in search for related candidates of a word not present in training data. We believe that crawling in breadthfirst search order provides the better tradeoff. On the other hand  , crawling in breadth-first search order provides a fairly good bias towards high quality pages without the computational cost. ×MUST generates the second smallest test suite containing the largest number of non-redundant tests and the smallest number of redundant tests Fig. The differences between all strategies breadth-first  , random search  , and Pex's default search strategy were negligible. When looking at search result behaviour more broadly we see that what browsing does occur occurs within the first page of results. This reduced breadth of access is further evidence for the goaldriven behaviour seen in search. If all words in a title or subtitle are search keywords  , too many subject keywords will be generated. We have introduced a set of effective pruning properties and a breadth-first search strategy  , StatApriori  , which implements them. In this paper  , we have shown that its is possible to search all statistically significant rules in a reasonable time. In the first iteration  , only the reported invocations are considered  , starting with the most suspicious one working down to the least. We assume that a breadth-first search is performed over these top ranked invocations. These strategies typically optimize properties such as " deeper paths " in depth-first search  , " less-traveled paths " 35  , " number of new instructions covered " in breadth-first search  , or " paths specified by the programmer " 39. Existing DSE tools alleviate path explosion using search strategies and heuristics that guide the search toward interesting paths while pruning the search space. We have confirmed this expectation by running the MAY × MUST configuration with different exploration strategies on 20 methods for which exploration bounds were reached. This Figure 4: Use of case inheritance search travels upwards in the hierarchy  , i.e. , towards the roots. When determining the cases allowed for a given frame  , a breadth-first search of the case frame hierarchy collects the relevant cases. DFS may take very long to execute if it does not traverse the search space in the right direction. Depth Firat Search DFS and Breadth First Scorch BFS are examples of this class. This list is used by the predictor to perform a breadth first search of the possible concepts representing the input text. That partial structure is added as the first entry to the queue of partial structures. We perform the pose graph optimization first  , to make all poses metric consistent. It is in fact a similar hybrid reasoning engine which is a combination of forward reasoning breadth-first and backward reasoning depth-first search. This continues until there are no more transitions to be fired. During prediction  , we explore multiple paths  , depending on the prediction of the MetaLabeler  , using either depth-first or breadth-first search. A content-based MetaLabeler was built at each node in the taxonomy. A second dimension entails elaborating on line 3. Surprisingly  , they did not find any significant variation in the way users examine search results on large and small displays. Similarly to 23 they adopted taxonomy of three examination strategies: Depth-First  , Mixed  , Breadth-First. Because the expansion is breadth first  , the optimal trajectory will he the first one encountered that meets the desired uncertainty. For the fixed-uncertainty minimum-time optimization the search tree is expanded until the desired uncertainty is reached. Since large main memory size is available in Gigabytes  , current MFI mining uses depth first search to improve performance to find long patterns. But MaxMiner uses a breadth-first approach to limit the number of passes over the database. Although breadth-first search does not differentiate Web pages of different quality or different topics  , some researchers argued that breadth-first search also could be used to build domain-specific collections as long as only pages at most a fixed number of links away from the starting URLs or starting domains are collected e.g. , 18  , 21. All URLs in the current level will be visited in the order they are discovered before URLs in the next level are visited. This method assumes that pages near the starting URLs have a high chance of being relevant. Since the path down the tree is controlled by the nodes that are popped from the heap  , the search is neither a true depth.first nor a true breadth·first search of the hierarchy. They conducted two experiments to determine whether users engaged in a more exhaustive " breadth-first " search meaning that users will look over a number of the results before clicking any  , or a " depth-first " search. One other study used eye-tracking in online search to assess the manner in which users evaluate search results 18. For instance  , SAGE 28  uses a generational-search strategy in combination with simple heuristics  , such as flip count limits and constraint subsumption. Sine~ each node consists of only 24 bytes and the top-down search is closer to a depth-first search than a breadth-first search  , the amount of space required by the hierarchy n·odes is not excessive. The hierarchy nodes may be accessed more than once  , so they must be stored in separate locations. In our experience of applying Pex on real-world code bases  , we identify that Pex cannot explore the entire program due to exponential path-exploration space. Which branching points are flipped next depends on the chosen search strategy  , such as depth-first search DFS or breadth-first search BFS. In particular  , Pex flips some branching points from previous runs to generate test inputs for covering new paths. It is written in Java and is highly configurable. That is  , starting from the root pages of the selected sites we followed links in a breadth-first search  , up to 3 ,000 pages per site. In our experiment  , we crawled 3 ,000 pages at each site. After both connections are made  , we find a path in the roadmap between the two connection points using breadth-first search. If we still can't connect both nodes to the same connected component of the roadmap  , then we declare failure. In this case  , only one DFA in conjunction with a standard breadth first search is used to grow a single frontier of entities. A similar solution is used for single source path patterns. We will denote this approximate Katz measure as aKatz throughout the rest of the paper. We execute breadth-first-search from s up to k levels without visiting t  , while keeping track of all paths formed so far. Any objects that are reached during the traversal are considered live and added to the tempLive set. We construct a work list starting at persist.root so we can perform a breadth-first search of the object graph. To propagate the constraints on join variable bindings Property 2  , we walk over this tree from root to the leaves and backwards in breadth-first-search manner. Next  , we embed a tree on Gjvar discarding any cyclic edges. This module contains multiple threads that work in parallel to download Web documents in a breadth-first search order. The Spider module is responsible for collecting documents from the Web. We observed that the similarity scores for the neighbours often is either very close to one  , or slightly above zero. The corresponding histogram is shown in Fig. In order to sample the distribution of distances between nodes  , breadth first search trees were formed from a fraction of the nodes. By following the path with the minimum cost  , the robot is guided to the nearest accessible unknown region. The breadth-first search is begun simultaneously at all these locations. See Figure 11for an example plan. Sensorless plans  , which must bring all possible initial orientations to the same goal orientation  , are generated using breadth-first search in the space of representative actions. Since the MFI cardinality is not too large MafiaPP has almost the time as Mafia for high supports. The breadth-first or level-wise search strategy used in MaxMiner is ideal for times better than Mafia. The former hierarchy is used to inherit cases  , the latter to compose synonym sets. The backward search can be illustrated in Figure 4by traversing the graphs in reverse in a breadth-first manner. For example  , assume that we want to check whether machine A can be in on in a stable state. This " 3 ,000 page window " was decided for practical reasons. The crawl was breadth-first and stopped after one million html pages had been fetched. The crawl occurred in January  , 2002 and was made to mimic the way a real search service of the .gov pages might make a crawl. The predictor pops the top structure off of the queue and tries to extend it using the substantiator. Our solution combines a data structure based on a partial lattice  , and memoization of intermediate solutions. The number of traversals is bounded by the total number of elements in the model and view at hand. Checking for missing connections is done by a breadth-first search of the connectors in the model. We used JPF's breadth-first search strategy  , as done for all systematic techniques in 28. We specified sequence length 10 this was greater than the length required to find all the Java errors from Figure 7. Recall that we must regenerate the paths between adjacent roadmap nodes since they are not stored with the roadmap. This task is efficiently performed by an optimized implementation of the Breadth-first search BFS strategy through MapReduce 3. In particular  , we index all the shortest paths starting from a source and ending with a sink. At running time we use the index to retrieve the paths whose sink node matches a keyword. An estimate of L was formed by averaging the paths in breadth first search trees over approximately 60 ,000 root nodes. From the 259 ,794 sites in the data set  , the leaf nodes were removed  , leaving 153 ,127 sites. This allowed us to perform bidirectional breadth first search to answer the connectivity question. For each URL present in the dataset  , the crawler saved the link structure following links both forward and backward for two hops. Even this crawl was very time consuming  , especially when the crawler came across highly linked pages with thousands of in-and out-links e.g. Link types extracted include straight HREF constructs  , area and image maps  , and Javascript constants. Links are explored from the starting page in breadth-first search using order of discovery for links at the same depth. Each term is mapped to a synset in WordNet and a breadth-first search along WordNet relations identifies related synsets. Word- Net is also used to expand terms with semantically similar concepts  , following an approach similar to 9. Interestingly  , we can perform sensorless orienting with shape uncertainty. We determine these paths by breadth-first search throughG. Given the initial and desired final configurations of the system  , the high level problem is how to get from the initial to the final equivalence region. Apriori does a breadth first search and determines the support of an itemset by explicit subset tests on the transactions . The main differences between Apriori and Eclat are how they traverse this tree and how they determine the counter values. Comparing the running times we observe that MaxMiner is the best method for this type of data. RBFS using h 0 = 0 behaves similarly to the breadth-first search. Heuristic function h 0 evaluates all nodes equally so it has no heuristic power and does not provide any guidance. Then  , starting from this seed set  , we use the following five strategies to select five different account sets with the same selection size of k from the dataset 5 : random search RAND  , breath-first search BFS  , depthfirst search DFS  , random combination of breadth-first and depth-first search RBDFS 6   , and CIA. In this experiment  , we start from the same seed set of N identified criminal accounts   , which are randomly selected from 2 ,060 identified criminal accounts. The existing thread has the additional topic node 413 which is about compression of inverted index for fast information retrieval. shows the result of the experiment after the second step of the breadth-first search. Each operation produces a temporary result which must be materialized and consumed by the next operation. A combination of these operators induces a breadth-first search traversal of the DBGraph. bring the two parts to distinguishable states. The crawl started from the Open Directory's 10 homepage and proceeded in a breadth-first manner. For the experiments in this paper  , our search engine indexed about 130 million pages  , crawled from the Web during March of 2004. Each of these subsets is identified using a breadth first search technique. In an object like a dimpled sphere such as a golf ball  , the concavity regions are disjoint sets of features. We choose the appropriate face vector field and cell vector field for the two cases as described in Section IV. The trajectory design problem is solved by performing a pyramid  , breadth-first search. In practice four to six iterations are sufficient to achieve a heading space resolution of less than one degree. The search then proceeds in a breadth-first fashion with a crawling that is not limited to URL domain or file size. The start point for the crawl is the home page of the target site. An efficient implementation can use a data structure like the tree shown in Figure 1to store the counters  Apriori does a breadth first search and determines the support of an itemset by explicit subset tests on the transactions . JPF is built around first  , breadth-first as well as heuristic search strategies to guide the model checker's search in cases where the stateexplosion problem is too severe 18. JPF is an explicit-state model checker that analyzes Java bytecode classes directly for deadlocks and assertion violations. Therefore  , to perform concolic testing we need to bound the number of iterations of testme if we perform depth-first search of the execution paths  , or we need to perform breadth-first search. Since the function testme runs in an infinite loop  , the number of distinct feasible execution paths is infinite. This simple but extremely flexible prioritization scheme includes as a special case the simpler strategies of breadth-first search i.e. , a queue and depth-first search i.e. , a stack. Simply by assigning a priority to each alternative   , the DBC can determine the order of evaluation of invocations  , achieving flexible evaluation order  , one of our major objectives. A similar strategy was used by the Exodus rule-generated optimizer GDS ? In both studies  , users were significantly more likely to engage in the depthfirst strategy  , clicking on a promising link before continuing to view other abstracts within the results set. Thus pipelined and setoriented strategies have similar complexity on a DBGraph. They may constitute part of more complex execution plans Thev89The temporal complexity of a depth-first search is OmaxCardX ,CardA while that of a breadth-first search is OCardA Gibb85 . On the other hand  , the depth-first search methods e.g. , PrefixSpan 14 and SPAM 1 grow long patterns from short ones by constructing projected databases. On one hand  , the breadth-first search methods e.g. , GSP 15 and SPADE 21 are based on the Apriori principle 5  and conduct level-by-level candidategeneration-and-tests . The search is guaranteed to halt since there are a finite number of equivalence classes and our search does not consider sequences with cycles. If a plan is found it is guaranteed to be the shortest because of the nature of breadth first search and if the search fails to find any solution then no solution exists for the part. Thus  , a breadth-first search for the missing density-connections is performed which is more efficient than a depth-first search due to the following reasons: l The main difference is that the candidates for further expansion are managed in a queue instead of a stack. The error plateaus at the final level of the bounding hierarchy because a lower bound cannot be extracted until the level finishes. Non-promising URLs are put to the back of the queue where they rarely get a chance to be visited. The number of possible choices of values of c and s that concolic testing would consider in each iteration is 17. Abstractly we view a program as a guarded-transition systems and analyze transition sequences. We used depth-first search DFS as the basis for PRSS in this paper; we plan to explore the use of variants of breadth-first search in future work. An enumerative search strategy is first characterized by the choice of the next state to apply an action on  , performed by the setNextState method  , which determines in which way the states are investigated. Let's consider how the FI-combine see Figure 2 routine works  , where the frequency of an extension is tested. Thirdly  , the vertical format is more versatile in supporting various search strategies  , including breadth-first  , depth-first or some other  , hybrid search. For each top ranked search result  , they performed a limited breadth first search and found that searching to a distance of 4 resulted in the best performance. Vassilvitskii and Brill 6 used distance on the web graph to perform a reranking of search results given that relevant documents link to other relevant documents. For example  , the mean number of nodes accessed in the top-down search of the complete link hierarchy for the INSPEC collection is 873 requiring only 20 ,952 bytes of core. As indicated above  , there are basically two ways in which the search tree can be traversed We can use either a breadth first search and explicit subset tests Apriori or a depth first search and intersections of transaction lists Eclat. Furthermore  , the number of small SubStNCtureS 1 to 4 atoms can be enormous  , so that even storing only the topmost levels of the tree can require a prohibitively large amount of memory. The MSN Search crawler discovers new pages using a roughly breadth-first exploration policy  , and uses various importance estimates to schedule recrawling of already-discovered pages. These pages were collected during August 2004  , and were drawn arbitrarily from the full MSN Search crawl. Therefore   , pages crawled using such a policy may not follow a uniform random distribution; the MSN Search crawler is biased towards well-connected  , important  , and " high-quality " pages. The second tool  , Meta Spider  , has similar functionalities as the CI Spider  , but instead of performing breadth-first search on a particular website  , connects to different search engines on the Internet and integrates the results. A sample user session with CI Spider is shown in Figure 1. We make use of relations such as synonym  , hypernym  , hyponym  , holonym and meronym and restrict the search depth to a maximum of two relations. Our results explain their finding by showing that relevant documents are found within a distance of 5 or are as likely to be found as non-relevant documents. In this graph  , subsequent actions are connected  , and TransferReceive / TransferSend actions are additionally connected to each other's subsequent actions. During this search  , we check that the newly introduced transfer does not induce a cycle of robots waiting for each other by performing breadth first search on the graph formed by the robot's plans. Through several recent independent evaluations 17  , 6  , it is now well accepted that a prefix tree-based data set representation typically outperforms both the horizontal and the vertical data set representations for support counting. The itemset search space traversal strategy that is used is depth-first 18  , breadth-first 2  , or based on the pattern-growth methodology 22. The existing methods essentially differ in the data structures used to " index " the database to facilitate fast enumeration. The search can be performed in a breadth-first or depth-first manner  , starting with more general shorter sequences and extending them towards more specific longer ones. We iterate through every possible insertion point for the new pickup or delivery point in s plan   , and choose the plan of lowest cost. A node in the tree contains the set of orientations consistent with the push-align operations along the path to the node. Search procedure: To find an orienting plan  , we perform a breadth-first search of an AND/OR tree lS . The documents retrieved by the web browsers of focused crawlers are validated before they are stored in a repository or database. Focused crawlers  , in contrast to breadth-first crawlers used by search engines  , typically use an informed-search strategy and try to retrieve only those parts of the Web relevant to some given topic 1  , 5  , 9  , 15 . The experiments described in this paper demonstrate that a crawler that downloads pages in breadth-first search order discovers the highest quality pages during the early stages of the crawl. For example  , the Internet Archive crawler described in 3  does not perform a breadthfirst search of the entire web; instead  , it picks 64 hosts at a time and crawls these hosts in parallel. If a winning path exists  , then the path represents the search schedule for the two pursuers. In order to find a winning path  , it suffices to build the graph G and to perform breadth-first search beginning at a start and ending at a goal vertex. To guide the search  , we work backward from a unique final orientation toward a range of orientations of size 27r  , which corresponds to the full range of uncertainty in initial part orientation. After the push function is used to partition the space of push directions into equivalence classes  , we perform a breadth-first search of push combinations to find a fence design. Its first phase is a " crawler " or " spider " that automatically searches part of the Web for caption candidates  , given a starting page and the number of trailing domain words establishing locality so " www.nps.navy.mil 2 " indicates all " navy.mil " sites. The breadth-first search implies that density-connections with the minimum number of objects requiring the minimum number of region queries are detected first. In a non-split situation  , we stop as soon as all members of UpdSeedDel are found to be density-connected to each other. The preponderance of diagonal path lines is due to the search being 8-connected  , and being breadth-first. The waypoints marked on the image indicate equally spaced one-hour time increments  , with the exception of the first interval  , which is a half hour. Sequence mining is essentially an enumeration problem over the sub-sequence partial order looking for those sequences that are frequent. All experiments in this section use the breadth-first search strategy. Our J-Sim experiments build the OU T data structure from Figure 4 and write it to a file only for the first version  , and load the information for unmodified transitions from the file to the IN data structure for each subsequent version. Text is provided for convenience. It is the sort of crawl which might be used by a real .gov search service: breadth first  , stopped after the first million html pages and including the extracted plain text of an additional 250 ,000 non-html pages doc  , pdf and ps. We note that for every fixed query a node assignment requiring no calls to updateP ath always exists: simply label the nodes in order discovered by running breadth-first search from s. However  , there is no universally optimal assignment — different queries yield different optimum assignments. This means that we can start emitting results right away when we retrieve the first result from the index. Focused crawling  , on the other hand  , attempts to order the URLs that have been discovered to do a " best first " crawl  , rather than the search engine's " breadth-first " crawl. " Rather  , any and all newly discovered links are placed onto the crawl frontier to be downloaded when their turn comes. Generalised search engines that seek to cover as much proportion of the web as possible usually implement a breadth-first BRFS or depth-first A. Rauber et al. The visiting strategy of new web pages usually characterises the purpose of the system. MaxMiner also first uses dynamic reordering which reorder the tail items in the increasing order of their supports. MaxMiner 3 uses a breadth-first search and performs look-ahead pruning which prunes a whole tree if the head and tail together is frequent. The data set representation that is used is horizontal 2  , vertical 35  , or based on a prefix tree 22. In effect we find the last fence first and work upstream  , like a salmon. l A split situation is in general the more expensive case because theparts of the cluster to be split actually have to be discovered. For each public user  , we first counted the number of protected mutual neighbours as well as the ratio of protected to all mutual neighbours. The arrangement enumeration tree is created as described above  , using the set of operands defined in Section 2 and it is traversed using either breadth-first or depth-first search. In general  , on level : 1 is created by joining the nodes in -with those in   , 2 for every node   , is defined and then linked to . The effect of search pruning at all Rtree levels is that  , starting from the top level  , the two nodes  , one from each R-tree  , are only traversed for join computation if the MBRs of their parent nodes overlap . In 3  , search pruning is done by synchronously traversing the two input R-trees depth-first whereas in BFRJ it is achieved by synchronized breadth-first traversal of both R-trees. Tuplesn tionally  , a depth first search explores one path deeply  , and thus may find a violation quickly if it serendipitously picks nodes that lead to some violation. Instead  , we can set parameters which we term the window's breadth and depth  , named analogously to breadth-first and depth-first search  , which control the number of toponyms in the window and the number of interpretations examined for each toponym in the window  , respectively. we consider all possible combinations of resolutions for these toponyms  , this results in about 3·10 17 possibilities  , an astonishingly large number for this relatively small portion of text  , which is far too many to check in a reasonable time. Otherwise  , the planner identifies the set of " boundary conditions " for the search  , namely:  The search for a sequence of regrasp operations proceeds by forward chaining from the set of initial gpg triples performing an evaluated breadth-first search in the space of compatible gpg triples. If there exists at least one non-empty intersection the pick-and-place operation can be performed with a single grasp corresponding to a gripper configuration of the non-empty intersection. Beam-search is a form of breadth-first search  , bounded both in width W and depth D. We use parameters D = 4 to find descriptions involving at most 4 conjunctions  , and W = 10 to use only the best 10 hypotheses for refinement in the next level. The quality of such rules is expressed with a confidence-intervalP with P = .95  , and the employed search strategy is beamsearchW  ,D. To seed our crawler  , we generated 100 ,000 random SteamIDs within the key space 64-bit identifiers with a common prefix that reduced the ID space to less than 10 9 possible IDs  , of which 6 ,445 matched configured profiles. In this graph  , vetexes and edges represent nodes and links respectively. Considering each mashup as a path  , we found that about 80% of 4100 existing mashup depth was no more than 3  , so we decided to make the depth level of the breadth-first-search be 3. A recent study of Twitter as a whole  , gathered by breadth-first search  , collected 1.47 billion edges in total 13. The accurate celebrity subgraph has a total of 835  , 117  , 954  , or about 835 million  , directed edges in it which is actually a non-negligible fraction of edges in Twitter's social graph. In this implementation the transitive closure of the digraph G T is based on a breadth first search through G T . This module computes the classification of an OWL 2 QL TBox T by adopting the technique described in Section 3. The sequence of retrieved documents displayed to the user is ordered by the number of edges from the entry point document. Additional documents are then retrieved by following the edges from the starting point in the order of a breadth first search. However  , after a large number of Web pages are fetched  , breadth-first search starts to lose its focus and introduces a lot of noise into the final collection. Instead of traversing the BVTT as a strictly depthfirst or breadth-first search JC98  , we use a priority queue to schedule which of the pending tests to perform next. Limiting the queue size limits the worst case storage requirements and performance of the al- gorithm. Since the planner performs breadth-first search in the space of representative actions  , the planner is complete if the computed action ranges are accurate. Given a nominal part shape with bounded shape uncertainty  , does the planner always return an orienting plan when one exists and indicate failure when no plan exists ? The initial collection was created for day 1 using a Breadth-First crawl that retrieved MAX IN INDEX = 100  , 000 pages from the Web starting from the bookmark URLs. We simulated 5 days of the search engine-crawler system at work. Using a 4000-node subgraph summarized in Table 3  , we generated 1633185 candidate edges. We developed an application  , ljclipper  , to restrict the overall friends graph to that induced by a subset of nodes of fixed number  , found using breadth-first search starting from a given seed. the largest subset of nodes such that any node within it can be reached from any other node following directed links  , contained 64 ,826 sites. When the FM is traversed using the breadth-first search BFS  , the edges in the FPN are generated according to relations between features in the FM and the weights on edges are computed  Lines 4∼5. Then E N i ,j  and W i ,j  are initialized Lines 2∼3. After the completion of breadth first search  , there are no unknown nodes and each node has a location area. Once we meet an unknown node  , we use its known neighbour nodes to compute its location area as described above and then turn it to a known node. In many cases  , simple crawlers follow a breadth-first search strategy  , starting from the root of a website homepage and traversing all URLs in the order in which they were found. Today  , Web Crawling is the standard method for retrieving and refreshing document collections 8 within WMSs as opposed to searching  , see 12. The rightmost thread contains the discussion in hypertext system in the late 80's such as hypertext system implementation Topic 166 and 224 and formal defintion of hypertext system using petrinet Topic 232. The CWB computes the similarity-degrees of the title and/or subtitles through a breadth-first search because the title and subtitles are within a nested structure. Searching for a similar title and/or similar subtitles in the compared Web site. As the crawl progresses  , the quality of the downloaded pages deteriorates. So  , instead of trying to find the optimal allocation we do the allocation by using the heuristic of traversing the tree in a breadth first-BF search order: l We have shown that finding an overall optimal allocation scheme for our cuboid tree is NP-hard DANR96 . Once it has been established that a high level path exists  , the lower level trajectory planning problem for each equivalence region node is to determine the trajectory which the cone must follow to reorient the part. Path planning for individual modules uses a breadth-first search starting at the end of the tail. At this point  , the chain is also moved to the tail  , starting at the extreme module e S of the slice and ending at the root lines 10–12. A candidate path is located when an entity from the forward frontier matches an entity from the reverse frontier. This enables to compute the representation of all concepts such that any pair of concepts sharing a common ancestor in the concept hierarchy will share a common prefix in their representation corresponding to this common ancestor. Once a goal state is reached we have a sequence of desired relative push angles which we know will uniquely reorient a part regardless of its initial orientation because that initial orientation must be in the range of The goal of the breadth first search then is to arrive at a current state p   , such that lpgl = 27r. We use the push function to find equivalence classes of actions-action ranges with the same effect. In our implementation  , we use breadth-first search in the space of representative actions to find the shortest sequence of fence rotations to orient the part. Our approtach to solve the regrasp problem is as follows: We generate and evaluate possible grasp classes of an object and its stable placements on a table; the regrasping problem is then solved by an evaluated breadth-first search in a space where we represent all compatible sequences of regrasp operations. Otherwise  , these constraints require that at least one regrasp operation must be performed. This procedure is then applied to all URLs extracted from newly downloaded pages. To address the issue of intolerance to false positives  , we consider only the top ten ranked method invocations reported in the diagnosis reports; the rest is ignored. In order to follow the edges in one direction in time  , we treat the edges between topic nodes as directed edges. To discover a topic evolution graph from a seed topic  , we apply a breadth-first search starting from the seed node but only following the edges that lead to topic nodes earlier in time. Our initial examination revealed that the allocated users IDs are very evenly distributed across the ID space. Capturing LCC Structure: To capture the connectivity structure of the Largest Connected Component LCC  , we use a few high-degree users as starting seeds and crawl the structure using a breadth-first search BFS strategy. Recently  , Microsoft Academic Search released their paper URLs and by crawling the first 7.58 million  , we have collected 2.2 million documents 4 . Third  , we import paper collections from other repositories such as arXiv and PubMed to incorporate papers from a breadth of disciplines. A lattice is defined over generated word sets for formulae  , and a breadth-first search starting from the query formula set is used to find similar formulae. convert operator trees to a bag of 'words' representing individual arguments and operator-argument triples 15. The graph pattern included in a SPARQL query is converted into a composition of such iterators  , according to a created query plan. That is  , for each node a set of SPARQL query patterns is generated following the rules depicted in Table 3w.r.t. This breadth-first search visits each node and generates several possible triple patterns based on the number of annotations and the POS-tag itself. The next step is to choose a set of cuboids that can be computed concurrently within the memory constraints . So  , instead of trying to find the optimal allocation we do the allocation by using the heuristic of traversing the tree in a breadth first-BF search order: l Clearly these computations can be done in time 0  m  once the minimum free radii have been calculated. We assign priority to the pending BVTT visits according to the distance: the closest pending BV pair is given a higher priority and visited next. The search is breadth-first and proceeds by popping a node from the head of OPEN list and generating the set of child nodes for the constituent states steps 1-4. If a node has a single state it is labeled solved. Search engines conduct breadth first scans of the site  , generating many requests in short duration. The Keynote robot can generate a request multiple times a minute  , 24 hours a day  , 7 days a week  , skewing the statistics about the number of sessions  , page hits  , and exit pages last page at each session. An estimate of the total number of edges by the present authors suggests there are around 7 billion edges in the present social graph. For each instance of the iterator created for a path pattern  , two DFAs are constructed. These pages contain 17 ,672 ,011 ,890 hyperlinks after eliminating duplicate hyperlinks embedded in the same web page  , which refer to a total of 2 ,897 ,671 ,002 URLs. Our web graph is based on a web crawl that was conducted in a breadth-first-search fashion  , and successfully retrieved 463 ,685 ,607 HTML pages. PD-Live does a breadth-first search from the document a user is currently looking at to select a candidate set of documents. Citation links and other similarity measures form a directed graph with documents as the nodes and similarity relationships as the edges. For clarity of exposition  , the database operations introduced in Section 3 have been described in a setoriented way  , independent of their integration in a query execution plan. Specifically   , we collected the previous Amazon reviews of each reviewer in the root dataset and the Amazon product pages those reviews were associated with. The topological map stores only relative information in edges while the metric map contains location of nodes with respect to the specified origin. The sensor-based planner performs breadth-first AND/OR search to generate sensor-based orienting plans for parts with shape uncertainty. Given a nominal part shape  , radius values of the center of mass and vertex uncertainty circles  , and maximum sensor noise  , they return a plan when they can find one and indicate failure otherwise. The sensorless planner uses breadth-first search to find sensorless orienting plans. For the parts in Figure 14  , going from top to bottom  , left to right  , the sensor-based planner took an average of 0.192 secs  , 1.870 secs  , 0.756 secs  , 0.262 secs  , 0.262 secs  , 0.224 secs  , and 0.188 secs respectively on a SPARC ELC. Using the enumeration tree as shown in Figure 2  , we can describe recent approaches to the problem of mining MFI. A simple breadth-first search is quite effective in discovering the topic evolution graphs for a seed topic Figure 4and Figure 5a. In this subsection  , rather than focusing on finding the single best parameter values  , we explore the parameter space and present multiple examples of graphs obtained with varying parameter values. show informative evolutionary structure  , carrying concrete information about the corpus that are sometimes previously unknown to us. We initially clone the live object set to know what it was set to before we begin walking the object graph. At every jvar-node  , we take intersection of bindings generated by its adjacent tp-nodes and after the intersection  , drop the triples from tp-node Bit- Mats as a result of the dropped bindings. They found that crawling in a breadth-first search order tends to discover high-quality pages early on in the crawl  , which was applied when the authors downloaded the experimental data set. 20 studied different crawling strategies and their impact on page quality. OVERLAP does the allocation using a heuristic of traversing the search tree in a breadth-first order  , giving priority to cuboids with smaller partition sizes  , and cuboids with longer attribute lists. For other cuboids  , only a single page of memory can be allocated -these cuboids are said to be in the " SortRun " state. The entry point can be directly provided by the user by selecting a document icon  , or determined by the system as the document that best matches the query. If the action ranges are overly conservative  , the planner may not find a solution even when one exists. Our evaluation is based on two data sets: a large web graph and a substantial set of queries with associated results  , some of which were labeled by human judges. Unlike pure hill-climbing  , MPA in DAFFODIL uses a node list as in breadth-first search to allow backtracking  , such that the method is able to record alternative  " secondary " etc. As desired by the user the list can be reduced to terminal authors. To detect deadlocks or paths to be folded we scan graph C with the BFS Breadth-First-Search algo­ rithm. and Next to the folding we introduce operations that re­ move from the systerl1 the vehicles that can visit all the vertices of their mission vectors. Unlike the simple crawlers behind most general search engines which collect any reachable Web pages in breadth-first order  , focused crawlers try to " predict " whether or not a target URL is pointing to a relevant and high-quality Web page before actually fetching the page. Focused crawlers are programs designed to selectively retrieve Web pages relevant to a specific domain for the use of domainspecific search engines and digital libraries. In addition  , focused crawlers visit URLs in an optimal order such that URLs pointing to relevant and high-quality Web pages are visited first  , and URLs that point to low-quality or irrelevant pages are never visited. Since the position bias can be easily incorporated into click models with the depth-first assumption  , most existing click models 4  , 11  , 13 follow this assumption and assume that the user examines search results in a top-to-bottom fashion. The breadth-first strategy  , however  , draws a different picture: a user will look ahead at a series of results before clicking on the favorite results among them. The subgraph returned by BFS usually contains less vertices in the target community than the subgraph of the same size obtained by random walk technique. It is worthwhile noting that other expansion methods such as breadth-first-search BFS would entirely ignore the bottleneck defining the community and rapidly mix with the entire graph before a significant fraction of vertices in the community have been reached. If the similarity-degree of a title and/or subtitles is higher than the threshold ­  , the title and/or subtitles are regarded a similar title and/or similar subtitles  , and the contents of the title and subtitles are considered similar contents. The use of the succ-tup and succ-val* primitives defines a traversal of the DBGraph following a breadth-first search EFS strategy Sedg84  , as follows : The transitive closure operation is performed by simply traversing links  , Furthermore testing the termination condition is greatly simplified by marking. The resulting operation  , called SIKC val*v ,R.k  , delivers and marks all non marked tuple ve&es connected to the value v by one edge valued by R.k. One possible source of this difference is that the crawling policies that gave rise to each data set were very different; the DS2 crawl considered page quality as an important factor in which pages to select; the DS1 crawl was a simpler breadth-first-search crawl with politeness. The DS1 and DS2 curves differ significantly: DS2 contains about twice as many documents which contain no popular shingles at all. If the target community exists for the seed set  , then according to 6  , this target community would serve as a bottleneck for the probability to be spread out. Before searching for a regrasp sequence  , the regrasp planner checks if the pick-and-place operation can be achieved within a single grasp. The division of the planning into ofRine and online computation with as much a priori knowledge as possible used for the offline computation turns out to be an efficient and powerful concept  , operating online in connection with the evaluated breadth-first search in the space of compatible regrasp operations. Two gpg triples Gi  ,  ,Pj  ,  ,Gkl sumes less than 5.0 sec CPU time on a SPARC station 5. The unions D:=DuAD and AD':=AD'usucc~val*v'  , R.1 can be efficiently implemented by a concatenation since marking the tuples avoid duplicate generation. To capture the full semantics of an input question  , HAWK traverses the predicated-argument tree in a pre-order walk to reflect the empirical observation that i related information are situated close to each other in the tree and ii information are more restrictive from left to right. Starting from this seed set  , we performed a breadth-first crawl traversing friendship links aiming to discover the largest connected component of the social graph. To initiate the crawl  , we used the search facilities on PornHub to retrieve all users from the 60 largest cities within and the 48 largest cities outside of the USA based on population  , giving us a seed set of 102k users. This figure suggests that breadth-first search crawling is fairly immune to the type of self-endorsement described above: although the size of the graph induced by the full crawl is about 60% larger than the graph induced by the 28 day crawl  , the longer crawl replaced only about 25% of the " hot " pages discovered during the first 28 days  , irrespective of the size of the " hot " set. The overlap continues in the 60- 80% range through the extent of the entire 28 day data set. the node that has the shortest average path to all the other nodes in Λ pred and to perform a breadth-first-search from this node in G pred subgraph of G containing only the nodes in Λ pred and their interconnects to create a tree of information spread and to use the leaves of that tree as the newly activated nodes. The first  , rather naive approach we implemented to predict Ξ pred was to select the most central node in set Λ pred ; i.e. Some connectivity-based metrics  , such as Kleinberg's al- gorithm 8  , consider only remote links  , that is  , links between pages on different hosts. In addition to the standard language features of Java  , JPF uses a special class Verify that allows users to annotate their programs so as to 1 express non-deterministic choice with methods Verify.randomn and Verify.randomBool  , 2 truncate the search of the state-space with method Verify.ignoreIfcondition when the condition becomes true  , and 3 indicate the start and end of a block of code that the model checker should treat as one atomic statement and not interleave its execution with any other threads with methods Verify.beginAtomic and Verify.endAtomic. Our experiments revealed that the influentials identified using this method have poor performance which led us to identify the next method of prediction. If the edges of a lockdown graph are weighted by the number of images constituting the part of the segment between the two lockdown points or more appropriately  , the sub-nodes on which the two lockdown points lie  , choosing the smallest-sized cycle basis will reduce computational cost in computing HHT to a small extent. In our work we use a simple breadth-first-search routine  , modified along the suggestions in 3  , to find a cycle basis for graphs that are allowed to have multiple self-edges and multiple edges between vertices. For MR-TDSSM  , we implemented two LSTMs in different rates  , where the fast-rate LSTM uses daily signals and the slow-rate LSTM uses weekly signals. Therefore  , the length of the LSTM for TDSSDM is 14. Finally  , Figure 4shows that NCM LSTM QD+Q+D outperforms NCM LSTM QD+Q in terms of perplexity at all ranks. Furthermore  , Figure 3shows that NCM LSTM QD+Q+D consistently outperforms NCM LSTM QD+Q in terms of perplexity for rare and torso queries  , with larger improvements observed for less frequent queries. The parameters of the LSTM configuration  , i.e. , the parameters of the LSTM block and the parameters of the function F·  , are learned during training. 4. Figure 3shows that NCM LSTM QD+Q consistently outperforms NCM LSTM QD in terms of perplexity for all queries  , with larger improvements observed for less frequent queries. Table 3shows that NCM LSTM QD+Q outperforms NCM LSTM QD in terms of perplexity and log-likelihood by a small but statistically significant margin p < 0.001. Table 3shows that NCM LSTM QD+Q+D outperforms NCM LSTM QD+Q in terms of perplexity and log-likelihood. Since the short-term user history is often quite sparse  , models like LSTM that has many training parameters cannot learn enough evidence from the sparse inputs. On the other hand  , LSTM-based methods LSTM-only and LSTM-DSSM failed to outperform  the DSSM model  , which indicates that ignoring the longterm user interests may not lead to optimal performance. RQ4. For generation   , we first use an LSTM-RNN to encode the input sequence query to a vector space  , and then use another LSTM-RNN to decode the vector into the output sequence reply 32; for retrievals  , we adopt the LSTM-RNN to construct sentence representations and use cosine similarity to output the matching score 25. We use LSTM-RNN for both generation and retrieval baselines. RQ3. Unlike the RNN configuration  , which propagates the information from the vector state sr to the vector state sr+1 directly  , the LSTM configuration propagates it through the LSTM block  , which  , as said  , helps to mitigate the vanishing and exploding gradient problem. The LSTM configuration is illustrated in Figure 2b.  Neural Responding Machine. Table 1summarizes the results. Since LSTM extracts representation from sequence input  , we will not apply pooling after convolution at the higher layers of Character-level CNN model. The new successive higher-order window representations then are fed into LSTM Section 2.2. To verify whether the RNN model itself can achieve good performance for evaluation   , we also trained an LSTM-only model that uses only recent user embedding. We also tried GRU but the results seem to be worse than LSTM. Therefore  , we use the LSTM configuration in the subsequent experiments. From the above results  , we conclude that the introduction of the LSTM block helps to improve the learning abilities of the neural click models. The vector lt is used to additively modify the memory contents. LSTM models are defined as follows: given a sequence of inputs  , an LSTM associates each position with input  , forget  , and output gates  , denoted as it  , ft  , and ot respectively. The RNN with LSTM units consists of memory cells in order to store information for extended periods of time. A possible problem of the RNN configuration is the vanishing and exploding gradient problem described by Bengio et al. To explain user browsing behavior at lower positions  , NCM LSTM QD+Q+D considers other factors to be more important. In particular   , NCM LSTM QD+Q+D strongly relies on the current document rank to explain user browsing behavior on top positions. All t-SNE projections contain a large number of clusters of different density and size that group vector states by their similarities in the vector state space learned by NCM LSTM QD+Q+D . However  , these are not the only concepts learned by NCM LSTM QD+Q+D . The last LSTM decoder generates each character  , C  , sequentially and combines it with previously generated hidden vectors of size 128  , ht−1  , for the next time-step prediction. In the initial time-step  , the end-to-end output from the encoding procedure is used as the original input into first LSTM layer. We can notice that by adding a slow-rate LSTM weekly-based features to the MR-TDSSM  , it leads to great performance improvement over TDSSM with only one fast-rate LSTM component. Finally  , by combining long-term and short-term user interests  , our proposed models TDSSM and MR-TDSSM successfully outperformed all the methods significantly. The click probability cr is computed as in the RNN configuration Eq. From the above results  , we conclude that NCM LSTM QD+Q+D learns the concept " current document rank " although we do not explicitly provide this concept in the document representation. The data set used in our experiment comes from a commercial news portal which serves millions of daily users in a variety of countries and languages. LSTM outputs a representation ht for position t  , given by    , xT }  , where xt is the word embedding at position t in the sentence. The RNNs in the models are implemented using LSTM in Keras. To implement the TDSSM and MR-TDSSM  , we used Theano 1 and Keras 2 . From the above results  , we conclude that the representation q 2 of a query q provides the means to transfer behavioral information between query sessions generated by the query q. In addition  , Figure 4shows that NCM LSTM QD+Q performs as good as NCM LSTM QD in terms of perplexity at all ranks. character and word n-grams extracted from CNN can be encoded into a vector representation using LSTM that can embed the meaning of the whole tweet. The CNN-LSTM encoder-decoder model draws on the intuition that the sequence of features e.g. Figure 5ashows how the vector states sr for different ranks r are positioned in the space learned by NCM LSTM QD+Q+D . RQ6 a. The LSTM transition functions are defined as follows: These gates collectively decide the transitions of the current memory cell ct and the current hidden state ht. NCM LSTM QD+Q+D also uses behavioral information from all historical query sessions  , whose SERP contain the document d. However  , this global information does not tell us much about the relevance of the document d to the query q. When ranking a query-document pair q  , d  , NCM LSTM QD uses behavior information from historical query sessions generated by the query q and whose SERPs contain the document d. NCM LSTM QD+Q also uses behavioral information from all historical query sessions generated by the query q  , which helps  , e.g. , to distinguish highly personalized SERPs and to discount observed clicks in these sessions. The procedure for encoding and decoding is explained in the following section. In sequence-to-sequence generation tasks  , an LSTM defines a distribution over outputs and sequentially predicts tokens using a softmax function. The extent to which the information in the old memory cell is discarded is controlled by ft  , while it controls the extent to which new information is stored in the current memory cell  , and ot is the output based on the memory cell ct. LSTM is explicitly designed for learning long-term dependencies   , and therefore we choose LSTM after the convolution layer to learn dependencies in the sequence of extracted features . The variant Bi-LSTM 4 is proposed to utilize both previous and future words by two separate RNNs  , propagating forward and backward  , and generating two independent hidden state vectors − → ht and ← − ht  , respectively. A single directional LSTM typically propagates information from the first word to the last; hence the hidden state at a certain step is dependent on its previous words only and blind of future words . However  , NCM LSTM QD+Q+D still discriminates most other ranks we find this by limiting the set of query sessions  , which are used to compute the vector states sr  , to query sessions generated by queries of similar frequencies and having a particular set of clicks. where g = H conv is an extracted feature matrix where each row can be considered as a time-step for the LSTM and ht is the hidden representation at time-step t. LSTM operates on each row of the H conv along with the hidden vectors from previous time-step to produce embedding for the subsequent time-steps. In our case  , the size of the encN is 256. The vector output at the final time-step  , encN   , is used to represent the entire tweet. The model consists of several components: a Deep Semantic Structured Model DSSM 11 to model user static interests; two LSTM-based temporal models to capture daily and weekly user temporal patterns; and an LSTM temporal model to capture global user interests. Specifically  , in this work  , we propose a multi-rate temporal deep learning model that jointly optimizes long-term and short-term user interests to improve the recommendation quality. From the above results  , we conclude that the representation d 3 of a document d provides the means to transfer behavioral information between query sessions  , whose SERPs contain the document d. And this  , in turn  , helps to better explain user clicks on a SERP. The differences between the neural click models can be explained as follows. The term multi-rate indicates the capability of our model which is able to capture user interests at different granularity  , so that temporal dynamics at different rates can be effectively and jointly optimized. NCM LSTM QD+Q+D also memorizes whether a user clicked on the first document. In particular  , the information about a click on the previous document is particularly important. The decoder operates on the encoded representation with two layers of LSTMs. On the basis of sentence representations using Bi-LSTM with CNN  , we can model the interactions between two sentences. For gq  , p  , hq  , q0 ∈ 0  , 1  , we apply a sigmoid/logistic function given by σ· = 1 1+e −· . The prediction of character at each time step is given by: The last LSTM decoder generates each character  , C  , sequentially and combines it with previously generated hidden vectors of size 128  , ht−1  , for the next time-step prediction. Figure 6 shows how the vector states s7 for different distances to the previous click are positioned in the vector state space learned by NCM LSTM QD+Q+D . RQ6 b. Figure 1 illustrates the complete encoderdecoder model. We apply pooling to aggregate information along the word sequence. Fig- ure 3 and at all ranks Figure 4. Answers dataset 5 di↵erent splits are used to generate training data for both LSTM and ranking model  , Figure 2describes the steps I took to build training datasets. I use WebScope Yahoo! The encoding procedure can be summarized as: Since LSTM extracts representation from sequence input  , we will not apply pooling after convolution at the higher layers of Character-level CNN model. We trained the CNN-LSTM encoder-decoder model on 3 million randomly selected English-language tweets populated using data augmentation techniques  , which are useful for controlling generalization error for deep learning models . It is given by The bi-directional LSTM has 128 hidden units for each dimension ; CNN is 256 dimensional with a window size of 3. We maintained a vocabulary of 177 ,044 phrases by choosing those with more than 2 occurrences. Here  , σ is the sigmoid function that has an output in 0  , 1  , tanh denotes the hyperbolic tangent function that has an output in −1  , 1   , and denotes the component-wise multiplication . The large clusters are easily interpretable e.g. , they group vector states by rank  , distance to the previous click. Data augmentation  , in our context  , refers to replicating tweet and replacing some of the words in the replicated tweets with their synonyms. In addition  , a variant of the LSTMonly model which adds the user static input as the input in the beginning of the model is also evaluated. The rectangles labeled LSTM denote the long short-term memory block 20 that is used to alleviate the vanishing and exploding gradient problem 2. The matrices Wqs  , Wss  , Wis  , W ds denote the projections applied to the vectors q  , sr  , ir  , dr+1; the matrix I denotes an identity matrix. We explain this by the fact that other factors  , such as clicks on previous documents  , are also memorized by NCM LSTM QD+Q+D . Interestingly  , Figure 5bshows that the subspaces of the vector states sr for r > 1 consist of more than one dense clusters see  , e.g. , s2. These results show that NCM LSTM QD+Q+D learns the concept of distance to the previous click  , although this information is not explicitly provided in the document representation. Smaller clusters are less easily interpretable  , but their existence indicates that NCM LSTM QD+Q+D also operates with concepts that are not hard-coded in PGM-based click models. To the best of our knowledge  , ours is the first attempt at learning and applying character-level tweet embeddings . In this paper  , we presented Tweet2Vec  , a novel method for generating general-purpose vector representation of tweets  , using a character-level CNN-LSTM encoder-decoder architecture . Similar to PGM-based click models  , both RNN and LSTM configurations are trained by maximizing the likelihood of observed click events. We also use the gradient clipping technique 28  to alleviate the exploding gradient prob- lem 2 we set the value of the threshold = 1. The matrix Wsc denotes the projection matrix from the vector state sr+1 to the vector cr+1. RQ3 Does the representation q 2 of a query q as defined in §3.2.2 provide the means to transfer behavioral information from historical query sessions generated by the query q to new query sessions generated by the query q ? RQ2 Does the LSTM configuration have better learning abilities than the RNN configuration ? It does  , though  , inform us about the attractiveness of the document d  , which leads to improvements on the click prediction task see Experiment 4. In particular  , Figure 5cshows that for query sessions generated by queries of the same frequency and having the same click pattern  , the subspaces of the vector states consist of single dense clusters. The two state vectors are concatenated to represent the meaning of the t-th word in the sentence  , i.e. , The variant Bi-LSTM 4 is proposed to utilize both previous and future words by two separate RNNs  , propagating forward and backward  , and generating two independent hidden state vectors − → ht and ← − ht  , respectively. The neural click models can be used to simulate user behavior on a SERP and to infer document relevance from historical user interactions. We write NCM Y X to denote a neural click model with representation X QD  , QD+Q  , QD+Q+D and configuration Y RNN  , LSTM. RQ1 Does the distributed representation-based approach that models user behavior as a sequence of distributed vector representations have better predictive abilities than the PGMbased approach that models user behavior as a sequence of observed and hidden events ? σ· = 1 1+e −· is a known as a sigmoid/logistic function. We find that the subspaces of s0 and s1 are well separated from the subspaces of sr computed at lower positions; the subspaces of s2 and s3 are also separated from the subspaces of sr computed for other ranks  , but have a significant overlap with each other. Interestingly  , the subspace corresponding to query sessions containing no clicks on the first six documents d = 0 has a larger overlap with the subspace corresponding to query sessions containing a click on the second position d = 5 than with the subspace corresponding to query sessions containing a click on the first position d = 6. For future work  , we plan to extend the method to include: 1 Augmentation of data through reordering the words in the tweets to make the model robust to word-order  , 2 Exploiting attention mechanism 8 in our model to improve alignment of words in tweets during decoding  , which could improve the overall performance. This is intuitive  , because the less information there is to explain user behavior each query occurred only once and no clicks were observed  , the more NCM LSTM QD+Q+D learns to rely on ranks. Furthermore  , Figure 5cshows that for query sessions generated by queries of similar frequencies and having the same click pattern in our case  , no clicks the subspaces of sr are even better separated by ranks. We take a multi-phase optimization approach to cope with the complexity of parallel multijoin query optimization. Parallel multi-join query optimization is even harder 9  , 14  , 25.  Query optimization query expansion and normalization.  Query execution. a join order optimization of triple patterns performed before query evaluation. We focus on static query optimization  , i.e. Query optimization is a fundamental and crucial subtask of query execution in database management systems. Specify individual optimization rules. Any truly holistic query optimization approach compromises the extensibility of the system. There has been a lot of work in multi-query optimization for MV advisors and rewrite. First  , is to include multi-query optimization in CQ refresh. We now apply query optimization strategies whenever the schema changes. We now highlight some of the semantic query optimizationSQO strategies used by our run time optimizer. Thus the system has to perform plan migration after the query optimization. In query optimization using views  , to compute probabilities correctly we must determine how tuples are correlated. portant drawbacks with lineage for information exchange and query optimization using views. Semantic query optimization is well motivated in the literature6 ,5 ,7  , as a new dimension to conventional query optimization. is implemented as a rule-based system. Our experiments were carried out with Virtuoso RDBMS  , certain optimization techniques for relational databases can also be applied to obtain better query performance. Meta query optimization. The major problem that multi-query optimization solves is how to find common subexpressions and to produce a global-optimal query plan for a group of queries. Multi-query optimization is a technique working at query compilation phase. Multi-query optimization detects common inter-and intra-query subexpressions and avoids redundant computation 10  , 3  , 18  , 19. This comprises the construction of optimized query execution plans for individual queries as well as multi-query optimization. Logical query optimization uses equalities of query expressions to transform a logical query plan into an equivalent query plan that is likely to be executed faster or with less costs. Optimization. It complements the conventional query optimization phase. This is exactly the concept of Coarse-Grained Optimization CGO. One category of research issues deals with mechanisms to exploit interactions between relational query optimization and E-ADT query optimization. SQL Query Optimization with E-ADT expressions: We have seen that E-ADT expressions can dominate the cost of an SQL query. As in applying II to conventional query optimization  , an interesting question that arises in parametric query optimization is how to determine the running time of a query optimizer for real applications . These results are very promising and indicate that  , by using sipIIsl  , parametric query optimization can be efficiently supported in current systems. Not only are these extra joins expensive  , but because the complexity of query optimization is exponential in the amount of joins  , SPARQL query optimization is much more complex than SQL query optimization. SQL systems tend to be more efficient than triple stores  , because the latter need query plans with many self-joins – one per SPARQL triple pattern. The optimization on this query is performed twice. This query is shown in Figure 7. 33. 6  reports on a rule-based query optimizer generator  , which was designed for their database generator EXODUS 2. Rule-based query optimization is not an entirely new idea: it is borrowed from relational query optimization  , e.g. , 5  , 8  , 13  , 141. We divide the optimization task into the following three phases: 1 generating an optimized query tree  , 2 allocating query operators in the query tree to machines  , and 3 choosing pipelined execution methods. Breaking the Optimization Task. The parallel query plan will be dete&iined by a post optimization phase after the sequential query optimization . DB2 query optimizer has the' cost function in terms of resource consumption such as t.he CPU 'dime and I/O time. Typically  , all sub-expressions need to be optimized before the SQL query can be optimized. Query Optimization: The optimization of an SQL query uses cost-based techniques to search for a cheap evaluation plan from a large space of options. Query optimization in general is still a big problem. ? The architecture should readily lend itself to query optimization. Optimization of the internal query represen- tation. 2. Good query optimization is as important for 00 query languages as it is for relational query languages. 5 21. Mid-query re-optimization  , progressive optimization  , and proactive re-optimization instead initially optimize the entire plan; they monitor the intermediate result sizes during query execution  , and re-optimize only if results diverge from the original estimates. The optimization of each stage can use statistics cardinality   , histograms computed on the outputs of the previous stages. However  , semantic optimization increases the search space of possible plans by an order of magnitude  , and very ellicient searching techniques are needed to keep .the cost'of optimization within reasonable limits. As a result  , large SPARQL queries often execute with a suboptimal plan  , to much performance detriment. Then query optimization takes place in two steps. The Query Evaluator parses the query and builds an operator based query tree. The optimization goal is to find the execution plan which is expected to return the result set fastest without actually executing the query or subparts. This simplifies query optimization Amma85. Second  , the project operations are posponed until the end of the query evaluation. They investigate the applicability of common query optimization techniques to answer tree-pattern queries. Cost-based query optimization techniques for XML 22  , 29 are also related to our work. Substantial research on object-oriented query optimization has focused on the design and use of path indexes  , e.g. , BK89  , CCY94  , KM92. For query optimization  , we show how the DataGuide can be used as a parh index. Note that most commercial database systems allow specifying top-k query and its optimization. In general  , the need for rank-aware query optimization and possible approaches to supporting it is discussed in 25. The notion of using algebraic transformations for query optimization was originally developed for the relational algebra. We would like to develop a formal basis for query optimization for data models which are based on bags. In Section 3  , we view query optimization as a generic search problem and introduce a class hierarchy to model search strategies. In Section 2  , we model the search space  , which describes the query optimization problem and the associated cost model. Finally  , the optimal query correlatioñ Q opt is leveraged for query suggestion. Typically  , the optimization finishes within 30 iterations. The optimization problem of join order selection has been extensively studied in the context of relational databases 12  , 11  , 16. Picking the next query edge to fix is essentially a query optimization problem. This is in some cases not guaranteed in the scope of object-oriented query languages 27. 3 Dynamic Query Optimization Ouery optimization in conventional DBS can usually be done at compile time. While research in the nested algebra optimization is still in its infancy  , several results from relational algebra optimization 13 ,141 can be extended to nested relations. The QUERY LANGUAGE OPTIMIZER will optimize this query into an optimized access plan. IQP: we consider a modified version of the budget constrained optimization method proposed in 13 as a query selection baseline. Therefore  , the optimization function is changed to 6 also gives an overview over current and future development activities. Cost based optimization will be explored as another avenue of future work. Our current implementation is based on rule-based query optimization. Each iteralion contains a well-defined sequence of query optimization followed by data allocation optimization. The iterative approach controls the overall complexity of the combined problem. the optimization time of DPccp is always 1. As the optimization time varies greatly with the query size  , all performance numbers are given relative to DPccp  , e.g. More importantly  , multi-query optimization can provide not only data sharing but also common computation sharing. However  , the multi-query optimization technique can provide maximized capabilities of data sharing across queries once multiple queries are optimized as a batch. The major form of query optimization employed in KCRP results from proof schema structure sharing. . In a set-at-a-time system  , query optimization can take place at at least two levels. -We shall compare the methods for extensible optimization in more detail in BeG89. Another approach to extensible query optimization using the rules of a grammar to construct query plans is described in Lo88. A novel architecture for query optimization based on a blackboard which is organized in successive regions has been devised. For illustration purpose a sample optimization was demonstrated. Our approach allows both safe optimization and approximate optimization. The amount of pruning can be controlled by the user as a function of time allocated for query evaluation. A modular arrangement of optimization methods makes it possible to add  , delete and modify individual methods  , without affecting the rest. The optimization problem becomes even more interesting in the light of interactive querying sessions 2  , which should be quite common when working with inductive databases. This is effectively an optimization problem  , not unlike the query optimization problem in relational databases. That is  , we break the optimization task into several phases and then optimize each phase individually. Query Evaluation: If a query language is specified  , the E- ADT must provide the ability to execute the optimized plan. Query Operators and Optimization: If a declarative query language is specified  , the E-ADT must provide optimization abilities that will translate a language expression into a query evaluation plan in some evaluation algebra. This expansion allows the query optimizer to consider all indexes on relations referenced in a query. To give the optimizer more transformation choices  , relational query optimization techniques first expand all views referenced in a query and then apply cost-based optimization strategies on the fully expanded query 16 22 . First we conduct experiments to compare the query performance using V ERT G without optimization  , with Optimization 1 and with Optimization 2. In this section we present experimental results. The current implementation of DARQ uses logical query optimization in two ways. It utilizes containment mapping for identifying redundant navigation patterns in a query and later for collapsing them to minimize the query. 9 exploits XQuery containment for query optimization. 14 into an entity-based query interface and provides enhanced data independence   , accurate query semantics  , and highlevel query optimization 6 13. 17  and object-oriented approaches e.g. We represent the query subject probability as P sb S and introduce it as the forth component to the parsing optimization. Query open doesn't have the query subject. After query planning the query plan consists of multiple sub-queries. To build the plan we use logical and physical query optimization. Secondly  , relational algebra allows one to reason about query execution and optimization. This allows the result of one query to be used in the next query. We abstract two models — query and keyword language models — to study bidding optimization prob- lems. 1. The query optimization steps are described as transformation rules or rewriting rules 7. 0 That is  , any query optimization paradig plugged-in. The signature of the SumScan operator is: open. ASW87 found this degree of precision adequate in the setting of query optimization. Astrahan  , et al. What happens when considering complex queries ? We showed the optimization of a simple query. This problem can also be solved by employing existing optimization techniques. 13 for query q. And does this have impact with our technique ? We introduce a new loss function that emphasizes certain query-document pairs for better optimization. : Multiple-query optimization MQO 20 ,19 identifies common sub-expressions in query execution plans during optimization  , and produces globally-optimal plans. To avoid unnecessary materializations  , a recent study 6 introduces a model that decides at the optimization phase which results can be pipelined and which need to be materialized to ensure continuous progress in the system. For instance   , NN queries over an attribute set A can be considered as model-based optimization queries with F  θ  , A as the distance function e.g. , Euclidean and the optimization objective is minimization. This definition is very general  , and almost any type of query can be considered as a special case of model-based optimization query. This lower optimization cost is probably just an artifact of a smaller search space of plans within the query optimizer  , and not something intrinsic to the query itself. Figure 2shows that the optimization cost of all three queries is comparable  , although Q 2 has a noticeably lower optimization cost. Heuristics-based optimization techniques generally work without any knowledge of the underlying data. Heuristics-based optimization techniques include exploiting syntactic and structural variations of triple patterns in a query 27  , and rewriting a query using algebraic optimization techniques 12 and transformation rules 15 . The optimization cost becomes comparable to query execution cost  , and minimizing execution cost alone would not minimize the total cost of query evaluation  , as illustrated in Fig Ignoring optimization cost is no longer reasonable if the space of all possible execution plans is very large as those encountered in SQOS as well as in optimization of queries with a large number of joins. Both directions of the transformation should be considered in query optimization. Figure 2a and Classical database query optimization techniques are not employed in KCRP currently  , but such optimization techniques as pushing selections within joins  , and taking joins in the most optimal order including the reordering of database literals across rules must be used in a practical system to improve RAP execution. Our experiments show that the SP approach gives a decent performance in terms of number of triples  , query size and query execution time. Since only default indexes were created  , and no optimization was provided   , this leaves a room for query optimization in order to obtain a better query performance. For the query performance  , the SP queries give the best performance  , which is expected and consistent with the query length comparison. RDF native query engines typically use heuristics and statistics about the data for selecting efficient query execution plans 27. In this paper  , we present a value-addition tool for query optimizers that amortizes the cost of query optimization through the reuse of plans generated for earlier queries. The inherent cost of query optimization is compounded by the fact that typically each new query that is submitted to the database system is optimized afresh. The detection of common sub-expressions is done at optimization time  , thus  , all queries need to be optimized as a batch. Finally  , our focus is on static query optimization techniques. In fact  , the query performance of query engines is not just affected by static query optimization techniques but  , for instance  , also by the design of index structures or the accuracy of statistical information. By contrast  , we postpone work on query optimization in our geographic scalability agenda  , preferring to first design and validate the scalability of our query execution infrastructure. To our knowledge  , Mariposa was never deployed or simulated on more than a dozen machines  , and offered no new techniques for query execution  , only for query optimization and storage replication. In general  , any query adjustment has to be undertaken before any threshold setting  , as it aaects both ast1 and the scores of the judged documents  , all of which are used in threshold setting. These include: Reweighting query terms Query expansion based on term selection value Query optimization weights anddor selection of terms Threshold optimization. We begin in Section 2 by motivating our approach to order optimization by working through the optimization of a simple example query based on the TPC-H schema using the grouping and secondary ordering inference techniques presented here. We empirically show the benefits of plan refinement and the low overhead it adds to the cost of SELECT c custkey  , COUNT * FROM Customer  , Supplier WHERE c nationkey = s nationkey GROUPBY c custkey Figure 1: A Simple Example Query query optimization Section 5. On the other  , they are useful for query optimization via query rewriting. On the one hand  , the kinds of identities above attest to the naturality of our deenitions. Optimization of this query should seek to reduce the work required by PARTITION BY and ORDER BYs. The main query uses these results. Our work builds on this paradigm. However  , sound applications of rewrite rules generate alternatives to a query that are semantically equivalent. 'I'he traditional optimization problem is to choose an optimal plan for a query. Relational optimizers thus do global optimization by looking inside all referenced views. The paper is organized as follows. Furthermore  , the rules discovered can be used for querying database knowledge  , cooperative query answering and semantic query optimization. Optimization techniques are discussed in Section 3. In Section 2  , query model is formalized by defining all the algebraic operations required to compute answers to a query. That is  , at each stage a complete query evaluation plan exists. The " wholistic " approaches  , e.g. , 26  , 41  , consider an optimization graph-logical or physical--representing the entire query. They suffer from the same problems mentioned above. SQL-based query engines rely on relational database systems storage and query optimization techniques to efficiently evaluate SPARQL queries. The query engine uses this information for query planning and optimization. Data sources are described by service descriptions see Section 3.1. During the query optimization phase  , each query is broken down into a number of subqueries on the fragments . We discuss extensions in $2.3. JOQR is similar in functionality to a conventional query optimizer . We adopt a two-phase approach HS91 to parallel query optimization: JOQR followed by parallelization. Sections 4 and 5 detail a query evaluation method and its optimization techniques. Section 3 explains query generation without using a large lexicon. , April 21–25  , 2008ACM 978-1-60558-085-2/08/04. Query queries  , we have developed an optimization that precomputes bounds. Unfortunately  , restructuring of a query is not feasible if it uses different types of distance-combining functions. Table  IncludingPivot and Unpivot explicitly in the query language provides excellent opportunities for query optimization. These operations provide the framework to enable useful extensions to data modeling. Still  , strategy 11 is only a local optimization on each query. A simplr I ,RU type strategy like strategy W  , ignoring the query semantics  , performs very badly. The main concerns were directed at the unique operations: inclusive query planning and query optimization. Validity  , reliability  , and efficiency are more complex issues to evaluate. On the other hand  , more sophisticated query optimization and fusion techniques are required. Data is not replicated and is guaranteed to be fresh at query time. Tioga will optimize by coalescing queries when coalescing is advantageous. An optimization available on megaplans is to coalesce multiple query plans into a single composite query plan. In the third stage  , the query optimizer takes the sub-queries and builds an optimized query execution plan see Section 3.3. It highlights that our query optimization has room for improvement. We consider that this is due to a better consideration of this query particular pattern. Weights  , constraints  , functional attributes  , and optimization functions themselves can all change on a per-query basis . The attributes involved in each query will be different. The consideration of RDF as database model puts forward the issue of developing coherently all its database features. query optimization  , query rewriting  , views  , update. Motivated by the above  , we have studied the problem of optimizing queries for all possible values of runtime parameters that are unknown at optimization time a task that we call Parametric Query Optimiration   , so that the need for re-optimization is reduced. When these optimization-time assumptions are violated at execu-tion time  , m-optimization is needed or performance suffers. The multi-query optimization technique has the most restrictive requirement on the arrival times of different queries due to the limitation that multiple queries must be optimized as a batch. Thus  , a main strength of FluXQuery is its extensibility and the ability to benefit from a large body of previous database research on algebraic query optimization. Query optimization is carried out on an algebraic  , query-language level rather than  , say  , on some form of derived automata. On the other hand  , declarative query languages are easier to read since inherently they describe only the goal of the query in a simpler syntax  , and automatic optimization can be done to some degree. Manual optimization is easily possible without having to know much about the query engine's internals. This post optimizer kxamines the sequential query plan to see how to parallelize a gequential plan segment and estimates the overhead as welLas the response time reduction if this plan segment is executed in parallel. The query optimizer can add-derivation operators in a query expression for optimization purpose without explicitly creating new graph view schemes in the database. The query optimizer can naturally exploit this second optimization by dynamically building a temporary graph view: bfaidhd = e QEdge:rmdtypd'main mad " @oad and by applying Paths0 on it. optimization cost so far + execution cost is minimum. The notation is summarized in Integrated Semantic Query Optimization ISQO: This is the problem of searching the space of all possible query execution plans for all the semantically equivalent queries  , hut stopping the search when the total query evaluation time i.e. Query Language: An E-ADT can provide a query language with which expressions over values of/that E-ADT can be specified for example  , the relation E-ADT'may provide SQL as the query language  , and the sequence E-ADT may provide SEQinN. Our query language permits several  , possibly interrelated  , path expressions in a single query  , along with other query constructs. However  , we decided to build a new overall optimization framework for a number of reasons: Previous work has considered the optimization of single path expressions e.g. , GGT96  , SMY90. We differ in that 1 if the currently executing plan is already optimal  , then query re-optimization is never invoked. Techniques for dynamic query re-optimization 1615 attempt to detect sub-optimal plans during query execution and possibly re-use any intermediate results generated to re-compute the new optimal plan. However  , unlike query optimization which must necessarily preserve query equivalence  , our techniques lead to mappings with better semantics  , and so do not preserve equivalence. Our techniques are in the same spirit of work on identifying common expressions within complex queries for use in query optimization 25. To overcome this problem  , parametric query optimization PQO optimizes a query into a number of candidate plans  , each optimal for some region of the parameter space CG94  , INSS97  , INSS92  , GK94  , Gan98. Optimizing a query into a single plan may result in a substantially sub-optimal plan if the actual values are different from those assumed at optimization time GW89. For achieving efficiency and handling a general class of XQuery codes  , we generate executable for a query directly  , instead of decomposing the query at the operator level and interpreting the query plan. Second  , we present a new optimization called the control-aware optimization   , which can improve the efficiency of streaming code. When the SQL engine parses the query  , it passes the image expression to the image E-ADT   , which performs type checking and returns an opaque parse structure ParseStruct. This is an issue that requires further study in the form of a comprehensive performance evaluation on sipI1. Subsequently  , Colde and Graefe 8 proposed a new query optimization model which constructs dynamic plans at compile-time and delays some of the query optimization until run-time. Graefe and Ward 15 focused on determining when re-optimizing a given query that is issued repeatedly is necessary. The challenge in designing such a RISCcomponent successfully is to identify optimization techniques that require us to enumerate only a few of all the SPJ query sub-trees. Yet  , layering enables us to view the optimization problem for SPJ+Aggregation query engine as the problem of moving and replicating the partitioning and aggregation functions on top of SPJ query sub-trees. In FS98 two optimization techniques for generalized path expressions are presented  , query pruning and query rewriting using state extents. In CCM96  an algebraic framework for the optimization of generalized path expressions in an OODBMS is proposed  , including an approach that avoids exponential blow-up in the query optimizer while still offering flexibility in the ordering of operations. In section 6 the performance measurement is presented  , and finally section 7 summarizes our experiences and outlines future work. Kabra and DeWitt 21 proposed an approach collecting statistics during the execution of complex queries in order to dynamically correct suboptimal query execution plans. LEO is aimed primarily at using information gleaned from one or more query executions to discern trends that will benefit the optimization of future queries. Both solutions deal with dynamic reoptimization of parts of a single query  , but they do not save and exploit this knowledge for the next query optimization run. If the format of a query plan is restricted in some manner  , this search space will be reduced and optimization will be less expensive. For example  , during optimization  , the space of alternative query plans is searched in order to find the " optimal " query plan. There are six areas of work that are relevant to the research presented here: prefetching  , page scheduling for join execution  , parallel query scheduling  , multiple query optimization  , dynamic query optimization and batching in OODBs. Another topic for future \irork is providing support for cancelling submitted subqueries to the scheduler when a restrict or a join node yields an empty result. The idea of the interactive query optimization test was to replace the automatic optimization operation by an expert searcher  , and compare the achieved performance levels as well as query structures. The searcher is able to study  , in a convenient and effortless way  , the effects of query changes. Query optimization: DBMSs typically maintain histograms 15 reporting the number of tuples for selected attribute-value ranges. l Once registered in Routines within Kleisli manage optimization  , query evaluation  , and I/O from remote and local data sources. Service Descriptions are represented in RDF. Furthermore  , service descriptions can include statistical information used for query optimization. Even the expressions above and in And as such these approaches offer excellent opportunities for query optimization. Mondial 18 is a geographical database derived from the CIA Factbook. So  , the query offers opportunities for optimization. Open PHACTS 15   , query optimization time dominates and can run into the tens of seconds. In many RDF applications  , e.g. Extensions to the model are considered in Section 5. Section 4 deals with query evaluation and optimization. Search stops when the optimization cost in last step dominates the improvement in query execution cost. mi. We know that these query optimizations can greatly improve performance. Pipelined join execution is a Pipelining optimization. Generate the set of equivalent queries. which fragments slmultl be fetched from tertiary memory . part of the scheduler to do multiple query optimization betwtcn the subqucries. The optimization in Eq. The numbering in the query canvas implies the order in which the faces are specified. In Section 2 we present related work on query optimization and statistical databases. POP places CHECK operators judiciously in query execution plans. If the CHECK condition is violated  , CHECK triggers re-optimization. Graefe surveys various principles and techniques Gra93. A large body of work exists on query optimization in databases. There are several open challenges for our CQ architecture. Histograms were one of the earliest synopses used in the context of database query optimization 29  , 25. 5. In the context of deductive databases. Identifying common sub-expressions is central to the problem of multiple query optimization. In Section 3  , we describe our new optimization technique . In the next section  , we describe query evaluation in INQUERY. The second optimization exploits the concept of strong-token. Suppose we derive h hit-sequences from a query document. The three products differ greatly from each other with respect to query optimization techniques. We start explaining DJ's techniques. A key difference in query optimization is that we usually have access to the view definitions. 5.2. This makes them difficult to work with from an optimization point of view. Query execution times are  , in theory  , unbounded. Here n denotes the number of documents associated with query q i . , which makes the optimization infeasible. Analogous to order optimization we call this grouping optimization and define that the set of interesting groupings for a given query consists of 1. all groupings required by an operator of the physical algebra that may be used in a query execution plan for the given query 2. all groupings produced by an operator of the physical algebra that may be used in a query execution plan for the given query. by avoiding re-hashing if such information was easily available. A database system that can effectively handle the potential variations in optimization queries will benefit data exploration tasks. They are complementary to our study as they target an environment where a cost-based optimization module is available. In the area of Semantic Query Optimization  , starting with King King81  , researchers have proposed various ways to use integrity constraints for optimization. The idea of using integrity constraints to optimize queries is not new. In particular  , we describe three optimization techniques that exploit text-centric actions that IE programs often execute. Unlike current extraction approaches  , we show that this framework is highly amenable to query optimization . The Auto-Fusion Optimization involves iterations of fusion runs i.e. , result merging  , where best performing systems in selected categories e.g. , short query  , top 10 systems  , etc. This year  , we devised another alternative fusion weight determination method called Auto-Fusion Optimization. Our demonstration also includes showing the robustness POP adds to query optimization for these sources of errors. All of these sources of errors can trigger re-optimization because of a violation of the validity ranges. Thus  , optimizing the evaluation of boolean expressions seems worthwhile from the standpoint of declarative query optimization as well as method optimization. The need for optimizing methods in object bases has been motivated by GM88  , LD91. This file contains various classes of optimization/translation rules in a specific syntax and order. The information needed for optimization and query translation itself comes from a text file " OptimizationRules " . The DBS3 optimizer uses efficient non-exhaustive search strategies LV91 to reduce query optimization cost. When compared through this metrics  , many more tentative PTs are kept during the search  , thereby increasing significantly the optimization cost. Indeed  , our investigation can be regarded as the analogue for updates of fundamental invest ,igat.ions on query equivalence and optimization. Most of our results concern transaction equivalence and optimization. In all experiments  , TSA yields the best optimization/execution cost  , ratio. The major contribution of this paper is an extension of SA called Toured Simulated Annealing TSA  , to better deal with parallel query optimization. Contrary to previous works  , our results show clearly that parallel query optimization should not imply restricting the search space to cope with the additional complexity. For this purpose; we extended randomized strategies for parallel optimization  , and demonstrated their effectiveness. Further  , we also improve on their solution. In the next Section we discuss the problem of LPT query optimization where we import the polynomial time solution for tree queries from Ibaraki 841 to this general model of  ,optimization. For example   , if NumRef is set to the number of relations in the query  , it is not clear how and what information should be maintained to facilitate incremental optimization . Second  , the proposed incremental optimization strategy has a limitation. Following Hong and Stonebraker HS91  , we break the optimization problem into two phases: join ordering followed by parallelization. We address the problem of parallel query optimization  , which is to find optimal parallel plans for executing SQL queries. Clearly  , the elimination of function from the path length of high traffic interactions is a possible optimization strategy. Others question the propriety of removing DBMS services such as query optimization and views and suggest utilizing only high level interfaces. We have demonstrated the effects of query optimization by means of performance experiments. The primary contribution of this research is to underscore the importance of algebraic optimization for sequence queries along with a declarative language in which to express them. Our second goal with this demo is to present some of our first experiments with query optimization in Galax. Researchers interested in optimization for XQuery can implement their work in a context where the details of XQuery cannot be overlooked. We also showed how to incorporate our strategies into existing query optimizers for extensible databases. Our optimization strategies are provably good in some scenarios  , and serve as good heuristics for other scenarios where the optimization problem is NP-hard. AQuery builds on previous language and query optimization work to accomplish the following goals: 1. Edge optimization and sort splitting and embedding seem to be particularly promising for order-dependent queries. These optimization rules follow from the properties described earlier for PIVOT and UNPIVOT. The architecture of our query optimizer is based on the Cascades framework 3  , which enables defining new relational operators and optimization rules for them. However  , we can think of static optimization such as determining whether a query or a subquery is type-invalid early by inspecting the type information to avoid useless evaluation over potentially large amounts of irrelevant data. The method normalizes retrieval scores to probabilities of relevance prels  , enabling the the optimization of K by thresholding on prel. The threshold K was calculated dynamically per query using the Score-Distributional Threshold Optimization SDTO 1. This also implies that for a QTree this optimization can be used only once. If the outer query already uses GROUP-BY then the above optimization can not be applied. While ATLAS performs sophisticated local query optimization   , it does not attempt to perform major changes in the overall execution plan  , which therefore remains under programmer's control. and in-memory table optimization  , is carried out during this step. The direct applicability of logical optimization techniques such as rewriting queries using views  , semantic optimization and minimization to XQuery is precluded by XQuery's definition as a functional language 30. Finally query generation tools tend to generate non-minimal queries 31. The query term selection optimization was evaluated by changing /3 and 7. Although the precision decreased by several percent  , especially in the middle ranges in recall  , the combined optimization speeded retrieval by a factor of 10. A powerful 00 data modelling language permits the construction of more complex schemas than for relational databases. In order to query iDM  , we have developed a simple query language termed iMeMex Query Language iQL that we use to evaluate queries on a resource view graph. Therefore  , we follow the same principle as LUBM where query patterns are stated in descending order  , w.r.t. We deem query plan optimization an integral part of an efficient query evaluation. Given a logical query  , the T&O performs traditional query optimization tasks such as plan enumeration  , evaluating join orderings  , index selections and predicate place- ment U1188  , CS96  , HSSS. Our approach incorporates a traditional query optimizer T&O  , as a component. The different formats that exist for query tree construction range from simple to complex. As will be shown  , the different formats offer different tradeoffs  , both during query optimization and query execution. In database query languages late binding is somewhat problematic since good query optimization is very important to achieve good performance. Having late binding in the query language is necessary @ the presence of inheritance and operator overloading. There is currently no optimization performed across query blocks belonging to different E-ADTs . In this example   , the SQL optimizer is called on the outer query block  , and the SEQUIN optimizer operates on the nested query block. The entity types of our sample environment are given in Figs. In our experiments we found that binning by query length is both conceptually simple and empirically effective for retrieval optimization. Any query-dependent feature or combination of thereof can be used for query binning. Dynamic re-optimization techniques augment query plans with special operators that collect statistics about the actual data during the execution of a query 9  , 13. Moreover  , our approach is effective for any join query and predicate combinations. If a query can m-use cached steps  , the rest of the parsing and optimization is bypassed. These include exact match of the query text and equivalent host types from where the query originated. The task of the query optimizer is to build a feasible and cost-effective query execution plan considering limitations on the access patterns. Also  , the underlying query optimizer may produce sub-optimal physical plans due to assumptions of predicate independence. For this modularity  , we pay the penalty of inefficient query optimizers that do not tightly couple alternate query generation with cost-based optimization . DB2 Information Integrator deploys cost-based query optimization to select a low cost global query plan to execute . Statistics about the remote databases are collected and maintained at II for later use by the optimizer for costing query plans. We discuss the various query plans in a bit more detail as the results are presented. Consequently  , all measurements reported here are for compiled query plan execution i.e. , they do not include query optimization overhead. Development of such query languages has prompted research on new query optimization methods  , e.g. The evolution of relational databases into Object-Relational databases has created the need for relationally complete and declarative Object-Oriented 00 query languages. By compiling into an algebraic language  , we facilitate query optimization. Secondly  , many query optimizers work on algebraic representations of queries  , and try to optimize the order of operations to minimize the cost while still computing an algebraically equivalent query. Semantic query optimization can be viewed as the search for the minimum cost query execution plan in the space of all possible execution plans of the various semantically equivalent hut syntactically ditferent versions of the original query. Heurirtic Marching: We note that other researchers have termed such queries 'set queries' Gavish and Segev 19861. Query optimization derives a strategy for transmitting and joining these relations in order to minimize query total time or query response time. FluXQuery is  , to our knowledge  , the first XQuery engine that optimizes query evaluation using schema constraints derived from DTDs 1 . Apart from the obvious advantage of speeding up optimization time  , it also improves query execution efficiency since it makes it possible for optimizers to always run at their highest optimization level as the cost of such optimization is amortized over all future queries that reuse these plans. We have presented and evaluated PLASTIC  , a valueaddition tool for query optimizers that attempts to efficiently and accurately predict  , given previous training instances   , what plans would be chosen by the optimizer for new queries. RuralCafe  , then allows the users to choose appropriate query expansion terms from a list of popular terms. The first optimization is to suggest associated popular query terms to the user corresponding to a search query. The objective of this class of queries is to test whether the selectivity of the text query plays a role in query optimization. A natural example of such a query is searching for catalog items by price and description. The optimal point for this optimization query this query is B.1.a. Since the worklist is now empty  , we have completed the query and return the best point. The next important phase in query compilation is Query Optimization. A prominent example in which this can happen is a query with a Boolean AND expression if one of the subexpressions returns false and the other one returns an error. There are several reasons for wanting to restrict the design of a query tree. Planning a function like S&QWN causes the optimization of the embedded query to be performed. However  , existing work primarily focuses on various aspects of query-local data management  , query execution   , and optimization. In addition to the early work on Web queries  , query execution over Linked Data on the WWW has attracted much attention recently 9 ,10 ,12 ,13 ,14. The trade-off between re-optimization and improved runtime must be weighed in order to be sure that reoptimization will result in improved query performance. It remains future work to investigate whether and when re-optimization of a query should take place. E.g. , Given two topic names  , " query optimization " and " sort-merge join "   , the Prerequisite metalink instance " query optimization Pre sort-merge join  , with importance value 0.8 " states that " prerequisite to viewing  , learning  , etc. Metalinks represent relationships among topics not sources; i.e. , metalinks are " meta " relationships. The blackbox ADT approach for executing expensive methods in SQL is to execute them once for each new combination of arguments. A control strategy is needed to decide on the rewrite rules that should be applied to a given statement sequence. These optimizations are similar to rewrite rules used in conventional single-query optimization 4 as well as in multi-query optimization 1  , 6. With such an approach  , no new execution operators are required  , and little new optimization or costing logic is needed. Transforming PIVOT into GROUP BY early in query compilation for example  , at or near the start of query optimization or heuristic rewrite requires relatively few changes on the part of the database implementer. Optimization during query compilr tion assumes the entire buffer pool is available   , but in or&r to aid optimization at nmtime  , the query tree is divided into fragments. STON89 describes how the XPRS project plans on utilizing parallelism in a shared-memory database machine. Compared to the global re-optimization of query plans  , our inspection approach can be regarded as a complementary   , local optimization technique inside the hash join operator. If the operator detects that the actual statistics deviate considerably from the optimizer's estimates  , the current execution plan is stopped and a new plan is used for the remainder of the query. The Plastic system  , proposed in GPSH02   , amortizes the cost of query optimization by reusing the plans generated by the optimizer. CHS99  proposes least expected cost query optimization which takes distribution of the parameter values as its input and generates a plan that is expected to perform well when each parameter takes a value from its distribution at run-time. Optimization for queries on local repositories has also focused on the use of specialized indices for RDF or efficient storage in relational databases  , e.g. Research on query optimization for SPARQL includes query rewriting 9 or basic reordering of triple patterns based on their selectivity 10. A " high " optimization cost may be acceptable for a repetitive query since it can be amortized over multiple executions. This is made difficult by the necessary trade-off between optimization cost and quality of the generated plans the latter translates into query execution cost. We see that the optimization leads to significantly decreased costs for the uniform model  , compared to the previous tables. In Table 5we show CPU costs with this optimization  , for queries with expected query range sizes of 7 days  , 30 days  , and one year  , under the uniform and biased query model. In Figure 5  , we show results for the fraction pruning method and the max score optimization on the expanded query set. We found that  , counter to general wisdom regarding the max score optimization  , max score and our technique did not work as effectively on our expanded query set as on title queries. For example  , if our beers/drinkers/bars schema had " beers " as a top level node  , instead of being as a child node of Drinkers  , then the same query would had been obtained without the reduction optimization. We observed that this optimization also helps in making the final SQL query less sensitive to input schema. Many researchers have investigated the use of statistics for query optimization  , especially for estimating the selectivity of single-column predicates using histograms PC84  , PIH+96  , HS95 and for estimating join sizes Gel93  , IC91  , SS94 using parametric methods Chr83  , Lyn88 . Cost-based query optimization was introduced in SAC+79. For suitable choices of these it might be feasible to efficiently obtain a solution. It is evident that the result of a general OPAC query involves the solution of an optimization problem involving a potentially complex aggregation constraint on relation   , the nature of the aggregation constraint  , and the optimization objective  , different instances of the OPAC query problem arise. Third-order dependencies may be useful  , however   , and even higher-order dependencies may be of interest in settings outside of query optimization. The results in 16  indicate that  , for purposes of query optimization  , the benefits of identifying kth-order dependencies diminish sharply as k increases beyond 2. Doing much of the query optimization in the query language translator also helps in keeping the LSL interpreter as simple as possible. It is the translator  , not the LSL interpreter  , which can easily view the entire boolean qualification so as to make such an optimization. This research is an important contribution to the understanding of the design tradeoffs between query optimization and data allocation for distributed database design. The numhcr  , placement  , and effective use of data copies is an important design prohlem that is clearly intcrdcpcndent with query optimization and data allocation. Many researchers have worked on optimizer architectures that facilitate flexibility: Bat86  , GD87  , BMG93  , GM931 are proposals for optimizer genera- tors; HFLP89  , BG92 described extensible optimizers in the extended relational context; MDZ93  , KMP93  proposed architectural frameworks for query optimization in object bases. Fre87  , GD87  , Loh88 made rule-based query optimization popular  , which was later adopted in the object-oriented context  , as e.g. , OS90  , KM90  , CD92. Another approach to this problem is to use dynamic query optimization 4 where the original query plan is split into separately optimized chunks e.g. Our approach is to do local optimization of the resolvents of late bound functions and then define DTR in terms of the locally optimized resolvents. The technique in MARS 9 can be viewed as a SQL Optimization technique since the main optimization occurs after the SQL query is generated from the XML query. While this technique has its own advantages  , it does not produce efficient SQL queries for simple XML queries that contain the descendant axis // like the example in Section 2.1. However  , what should be clear is that given such cost-estimates  , one could optimize inductive queries by constructing all possible query plans and then selecting the best one. In the current implementation we e two-level optimization strategy see section 1 the lower level uses the optimization strateg present in this paper  , while the upper level the oy the in which s that we join order egy. Moreover  , as the semantic information about the database and thus the corresponding space of semantically equivalent queries increases  , the optimization cost becomes comparable to the cost of query execution plan  , and cannot be ignored. For query optimization  , a translation from UnQL to UnCAL is defined BDHS96  , which provides a formal basis for deriving optimization rewrite rules such as pushing selections down. query language BDHS96  , FS98 is based on a graph-structured data model similar to OEM. Moreover  , most parallel or distributed query optimization techniques are limited to a heuristic exploration of the search space whereas we provide provably optimal plans for our problem setting. Due to lack of code shipping  , techniques for parallel and distributed query optimization   , e.g. , fragment-replicate joins 26  , are inapplicable in our scenario. In the following we describe the two major components of our demonstration: 1 the validity range computation and CHECK placement  , and 2 the re-optimization of an example query. POP detects this during runtime  , as the validity range for a specific part of a query plan is violated  , and triggers re-optimization. 13; however  , since most users are interested in the top-ranking documents only  , additional work may be necessary in order to modify the query optimization step accordingly. After developing the complete path algebra  , we can apply standard query optimization techniques from the area of database systems see e.g. In this section  , we propose an object-oriented modeling of search systems through a class hierarchy which can be easily extended to support various query optimization search strategies. To establish the framework for modeling search strategies  , we view the query optimization problem as a search problem in the most general sense. We notice that  , using the proposed optimization method  , the query execution time can be significantly improved in our experiments  , it is from 1.6 to 3.9 times faster. The speedup is calculated as the query execution time when the optimization is not applied divided by the optimized time. Whereas query engines for in-memory models are native and  , thus  , require native optimization techniques  , for triple stores with RDBMS back-end  , SPARQL queries are translated into SQL queries which are optimized by the RDBMS. Because of the fundamentally different architectures of in-memory and on-disk models  , the considerations regarding query optimization are very different. When existing access structures give only partial support for an operation  , then dynamic optimization must be done to use the structures wisely. An ADT-method approach cannot identify common sub-expressions without inter-function optimization  , let alone take advantage of them to optimize query execution. Experiment 5 showed that the common subexpression optimization could reduce query execution time by almost a factor of two. For multiple queries  , multi-query optimization has been exploited by 11 to improve system throughput in the Internet and by 15 for improving throughput in TelegraphCQ. The work in 24 proposes rate-based query optimization as a replacement of the traditional cost-based approach. The novel optimization plan-space includes a variety of correlated and decorrelated executions of each subquery  , using VOLCANO's common sub-expression detection to prevent a blow-up in optimization complexity. Further  , ROLEX accepts a navigational profile associated with a view query and uses this profile in a costbased optimizer to choose a best-cost navigational query plan. The original method  , referred to as query prioritization QP   , cannot be used in our experiments because it is defined as a convex optimization that demands a set of initial judgments for all the queries. Note the importance of separating the optimization time from the execution time in interpreting these results. The diversity of search space is proportional to the number of different optimization rules which executed successfully during optimization. The size of the plan space is a function of the query size and complexity but also proportional to the number of exploration rules that created alternatives during optimization. To perform optimization of a computation over a scientific database system  , the optimizer is given an expression consisting of logical operators on bulk data types. In this section we present an overview of transformation based algebraic query optimization  , and show how the optimization of scientific computations fits into this framework. In this way  , the longer the optimization time a query is assigned  , the better the quality of the plan will be.2 Complex canned queries have traditionally been assigned high optimization cost because the high cost can be amortized over multiple runs of the queries. The optimizer should also treat the optimization time as a critical resource. Therefore  , some care is needed when adding groupings to order optimization  , as a slowdown of plan generation would be unacceptable . Experimental results have shown that the costs for order optimization can have a large impact on the total costs of query optimization 3. Apart from the obvious advantage of speeding up optimization time  , PLASTIC also improves query execution efficiency because optimizers can now always run at their highest optimization level – the cost of such optimization is amortized over all future queries that reuse these plans. Further  , even when errors were made  , only marginal additional execution costs were incurred due to the sub-optimal plan choices. These five optimization problems have been solved for each of the 25 selected queries and for each run in the set of 30 selected runs  , giving a total of 5×25×30 = 3  , 750 optimization problems. As seen in Figures 3 and 4  , there are five optimization problems to be solved for each query of each run one for each measure. While search efficiency was one of the central concerns in the design and implementation of the Volcano optimizer generator 8  , these issues are orthogonal to the optimization of scientific computations  , and are not addressed in this paper. To overcome this problem  , parametric query optimization PQO optimizes a query into a number of candidate plans  , each optimal for some region of the parameter space CG94  , INSS92  , GK94  , Gan98. On the other hand  , optimizing a query into a single plan at compilation time may result in a substantially suboptimal plan if the actual parameter values are different from those assumed at optimization time GW89. However  , a plan that is optimal can still be chosen as a victim to be terminated and restarted  , 2 dynamic query re-optimization techniques do not typically constrain the number of intermediate results to save and reuse  , and 3 queries are typically reoptimized by invoking the query optimizer with updated information. To tackle the problem  , we clean the graph before using it to compute query dissimilarity. If the graph is unreliable  , the optimization results will accordingly become unreliable. In addition  , we show that incremental computation is possible for certain operations . : Many of these identities enable optimization via query rewriting. Recent works have exploited such constraints for query optimization and schema matching purposes e.g. , 9. Example constraints include " housearea ≤ lot-area " and " price ≥ 10 ,000 " . Flexible mechanisms for dynamically adjusting the size of query working spaces and cache areas are in place  , but good policies for online optimization are badly missing. Memory management. The contributions in SV98 are complementary to our work in this paper. They also propose techniques for incorporating these alternative choices for cost based query optimization. 27  introduces a rank-join operator that can be deployed in existing query execution interfaces. 20 focuses on the optimization of the top-k queries. Let V denote the grouping attributes mentioned in the group by clause. We empirically show the benefits of plan refinement and the low overhead it adds to the cost of query optimization. Some alternatives are discussed in Has95. A few proposals exist for evaluating transitive closures in distributed database systems 1 ,9 ,22 . Parallelism is however recognized as a very important optimization feature for recursive query evaluation. l The image expression may be evaluated several times during the course of the query. l Deciding between different plans requires cost-based optimization of the image expression. Since vague queries occur most often in interactive systems  , short response times are essential. The models and procedures described here are part of the query optimization. The associated rewrite rules exploit the fact that statements of a sequence are correlated. Section 3 shows that this approach also enables additional query optimization techniques. Repetition is eliminated  , making queries easier to ready  , write  , and maintain. The implementation appeared to be outside the RDBMS  , however  , and there was not significant discussion of query optimization in this context. SchemaSQL 5 implements transposing operations. In Sections 2–4 we describe the steps of the BHUNT scheme in detail  , emphasizing applications to query optimization. The remainder of the paper is organized as follows. Static shared dataflows We first show how NiagaraCQ's static shared plans are imprecise. It can also be used with traditional multiple-query optimization MQO schemes. This monotonicity declaration is used for conventional query optimization and for improving the user interface. The user can specm  , for example  , that WEIGHT =< WEIGHTtPREV. The rest of the paper is organized as follows. The weights for major concepts and the sub concepts are 1.0 and 0.2  , respectively. The method for weight optimization is the same as that for query section weighting. Table 2shows the speedup for each case. have proposed a strategy for evaluating inductive queries and also a first step in the direction of query optimization. De Raedt et al. In addition to the usual query parsing  , query plan generation and query parallelization steps  , query optimization must also determine which DOP to choose and on which node to execute the query. The query coordinator prepares the execution depending on resource availability in the Grid. It also summarizes related work on query optimization particularly focusing on the join ordering problem. Section 5 reviews previous work on index structures for object-oriented data bases. We conclude with a discussion of open problems and future work. An approach to semantic query optimization using a translation into Datalog appears in 13  , 24. Precomputed join indexes are proposed in 46 . We envision three lines of future research. We enforced C&C constraints by integrating C&C checking into query optimization and evaluation. The remaining of this paper is structured as follows. Service call invocations will be tracked and displayed to illustrate query optimization and execution. Section 5 describes the impact of RAM incremental growths on the query execution model. Section 4 addresses optimization issues in this RAM lower bound context. Over all of the queries in our experiments the average optimization time was approximately 1/2 second. Each query was run with an initially empty buffer. 10 modeled conditional probability distributions of various sensor attributes and introduced the notion of conditional plans for query optimization with correlated attributes. Deshpande et al. Moral: AQuery transformations bring substantial performance improvements  , especially when used with cost-based query optimization. The result is consistently faster response times.   , s ,} The problem of parametric query optimization is to find the parametric optimal set of plans and the region of optimality for each parametric optimal plan. Ten years later  , the search landscape has greatly evolved. On the other hand  , in the SQL tradition  , W3QL was a declarative query language that offered opportunities for optimization. First  , our query optimization rules are based on optimizing XPath expressions over SQL/XML and object relational SQL. Our work is unique in the following respects. Furthermore. Sophisticated optimization will be used to separate the original query inlo pieces targeted for individual data sources whose content and order of execution are optimal. Schema knowledge is used to rewrite a query into a more efficient one. In this demo  , we highlight the schema-based optimization SQO on one abstraction level. Next  , we turn our attention to query optimization. We then show how to compile such a program into an execution plan. The module for query optimization and efficient reasoning is under development. The prototype of OntoQuest is implemented with Java 1.4.2 on top of Oracle 9i. For traditional relational databases  , multiplequery optimization 23 seeks to exhaustively find an optimal shared query plan. The problem of sharing the work between multiple queries is not new. We can now formally define the query optimization problem solved in this paper. This assumption is also validated by our experiments Section 7. The second step consists of an optimization and translation phase. Then  , this m%imal Query PCN is build in main memory. Section 2 provides an overview of BP-Mon  , and Section 3 briefly describes the underlying formal model. The size of our indexes is therefore significant  , and query optimization becomes more complex. But within that  , we maintain multiple tables of hundreds of millions of rows each. The existing optimizers  , eg. The approach of simultaneous query optimization will lead to each such plan being generated exactly once for all the queries optimized together. query execution time. For SQO  , we have to consider the trade-off between the cost of optimization and solution quality i.e. No term reweighting or query expansion methods were tried. As last year  , on this occasion we have tried only the threshold optimization. A similar concept is proposed in DeWitt & Gray 92. In addition to syntactic rules  , we may also study the domain-specific rules for inferring new triples using provenance  , temporal or spatial information. Whether or not the query can be unnested depends on the properties of the node-set . This optimization would unnest such a subquery. Several plans are identified and the optimal plan is selected. The basic idea of global planning is the same as query optimization in database management systems. Section 2 formally defines the parametric query optimization problem and provides background material on polytopes. For more sophisticated rules  , cost functions were needed Sma97  to choose among many alternative query plans. Some optimization techniques were designed  , but not all of them were implemented . A related approach is multi-query execution rather than optimization. Such operator sharing is even the cornerstone of the Q-Pipe architecture 14. 4.9  , DJ already maintains the minimal value of all primary keys in its own internal statistics for query optimization. In fact  , as explained in Sect. In Section 2  , we provide some background information on XML query optimization and the XNav operator. Scientific data is commonly represented as a mesh. This model can be exploited for data management and  , in particular  , we will use it for query optimization purposes. Their proposed technique can be independently applied on different parts of the query. 3  , 9  both consider a single optimization technique using one type of schema constraint. sources on sort-merge join "   , and this metalink instance is deemed to have the importance sideway value of 0.8. sources on query optimization is viewing  , learning  , etc. Compiling SQL queries on XML documents presents new challenges for query optimization. And this doesn't even consider the considerable challenges of optimizing XQuery queries! Experiment 3 demonstrates how the valid-range can be used for optimization. These valid ranges can be propagated through the entire query as described in SLR94. This function can be easily integrated in the query optimization algorisms Kobayashi 19811. The second difficulty can be resolved by introducing imaginary tuples. Resolve ties by choosing fragment that has the greater number of queries. Imposing a uniform limit on hot set size over all queries can be suboptimal. One is based on algebraic simplification of a query and compilr tinlc> heuristics. Finally  , consider the two major approaches to qitcry optimization for regular databases. An experienced searcher was recruited to run the interactive query optimization test. In practice  , the test searcher did not face any time constraints. However  , their optimization method is based on Eq. a given query node to Orn time  , thus needing Orn 2  time for all-pairs SimRank. Thirdly  , the relational algebra relies on a simple yet powerful set of mathematical primitives. Figure 4summarizes the query performance for 4 queries of the LUBM. Hence  , it is not surprising that for certain queries no optimization is achieved at all. MIRACLE exploits some techniques used by the OR- ACLE Server for the query optimization a rule-based approach and an statistical approach. 5.3. Section 3 presents our RAM lower bound query execution model. Second  , they provide more optimization opportunities. First  , users can calculate the whole Skycube in one concise and semantic-clear query  , instead of issuing 2 d − 1 skyline queries. To our best knowledge  , the containment of nested XQuery has so far been studied only in 9  , 18  , and 10. We use document-at-a-time scoring  , and explore several query optimization techniques. Second  , we are interested in evaluating the efficiency of the engine. During the first pass the final output data is requested sorted by time. The mathematical problem formulation is given in Section 3. In the literature  , most researches in distributed database systems have been concentrated on query optimization   , concurrency control  , recovery  , and deadlock handling. Finally  , conclusions appear in Section 5. In Section 6 we briefly survey the prior work that our system builds upon. The query evaluation and optimization strategies are then described in Sections 4 and 5. We also plan to explore issues of post query optimization such as dynamic reconfiguration of execution plan at run time. These are topics of future research. In Section 4  , we give an illustrative example to explain different query evaluation strategies that the model offers. Figure 8depicts this optimization based on the XML document and query in Figure 4. Also we can avoid creating any edges to an existence-checking node. The system returned the top 20 document results for each query. The results of our optimization experiments are shown in Tables 2 and 3. Query-performance predictors are used to evaluate the performance of permutations. The approach is based on applying the Cross Entropy optimization method 13 upon permutations of the list. The compiled query plan is optimized using wellknown relational optimization techniques such as costing functions and histograms of data distributions. As a result  , many runtime checks are avoided. If a DataGuide is to be useful for query formulation and especially optimization  , we must keep it consistent when the source database changes. Ct An important optimization technique is to avoid sorting of subcomponents which are removed afterwards due to duplicate elimination. The arrangement of query modification expressions can be optimized. The other set of approaches is classified as loose coupling. However  , such approaches have not exploited the query optimization techniques existing in the DBMSs. Query optimization is a major issue in federated database systems. A CIM application has been prototyped on top of the system RF'F95. Since the early stages of relational database development   , query optimization has received a lot of at- tention. Section 5 concludes the paper. The translation and optimization proceeds in three steps. Our query optimizer translates user queries written in XQuery into optimized FluX queries. Besides  , in our current setting  , the preference between relevance and freshness is assumed to be only query-dependent. For example  , using Logistic functions can naturally avoid the range constrains over query weights in optimization. These specific technical problems are solved in the rest of the paper. Then we give an overview of how a query is executed; this naturally leads to hub selection and query optimization issues. This is a critical requirement in handling domain knowledge  , which has flexible forms. Second  , a declarative query language such as SQL can insulate the users from the details of data representation and manipulation   , while offering much opportunity in query optimization. We examine only points in partitions that could contain points as good as the best solution. DB2 has separate parsers for SQL and XQuery statements   , but uses a single integrated query compiler for both languages. Histograms of element occurrences  , attribute occurrences  , and their corresponding value occurrences aid in query optimization. Many sources rank the objects in query results according to how well these objects match the original query. These characteristics also impact the optimization of queries over these sources. Additionally it can be used to perform other tasks such as query optimization in a distributed environment. A catalog service in a large distributed system can be used to determine which nodes should receive queries based on query content. The Postgres engine takes advantage of several Periscope/SQ Abstract Data Types ADTs and User-Defined Functions UDFs to execute the query plan. The query is then passed on to Postgres for relational optimization and execution . The optimization of Equation 7 is related to set cover  , but not straightforwardly. shows whether query graph q l has feature fi  , and z jl indicates whether database graph gj is pruned for query graph q l . The Epoq approach to extensible query optimization allows extension of the collection of control strategies that can be used when optimizing a query 14. The control we present here is designed to support thii kind of extensibility. Above results are just examples from the case study findings to illustrate the potential uses of the proposed method. One important aspect of query optimization is to detect and to remove redundant operations  , i.e. It is the task of the query optimizer to produce a reasonable evaluation strategy  161. Lots can be explored using me&data such as concept hierarchies  and discovered knowledge. Knowledge discovery in databases initiates a new frontier for querying database knowledge  , cooperative query answering and semantic query optimization. At every region knowledge wurces are act ivatad consecutively completing alternative query evaluation plans. The resultant query tree is then given to the relational optimizer  , which generates the execution plan for the execution engine. The query tree is then further optimized through view merging and subquery to join conversion and operator tree optimization. The goal of such investigations is es- tablishing equivalent query constructs which is important for optimization. Formalization cordtl cotlcern utilization of viewers in languages  , for example  , in query operators or programming primitives. Contributions of R-SOX include: 1. Our R-SOX system  , built with Raindrop 4  , 6  , 5 as its query engine kernel  , now can specify runtime schema refinements and perform a variety of runtime SQO strategies for query optimization. Moreover  , translating a temporal query into a non-temporal one makes it more difficult to apply query optimization and indexing techniques particularly suited for temporal XML documents. Even for simple temporal queries  , this approach results in long XQuery programs. There is no other need for cooperation except of the support of the SPARQL protocol. In particular  , M3 uses the statistics to estimate the cardinality of both The third strategy  , denoted M3 in what follows  , is a variant of M2 that employs full quad-based query optimization to reach a suitable physical query plan. More precisely  , we demonstrate features related to query rewriting  , and to memory management for large documents. At query optimization time  , the set of candidate indexes desirable for the query are recorded by augmenting the execution plan. The broad architecture of the solution is shown in Figure 4. Incorporate order in a declarative fashion to a query language using the ASSUMING clause built on SQL 92. Such models can be utilized to facilitate query optimization  , which is also an important topic to be studied. Another exciting direction for future work is to derive analytical models 12 that can accurately estimate the query costs. Originally  , query containment was studied for optimization of relational queries 9  , 33 . Finally  , we note that query containment has also been used in maintenance of integrity constraints 19  , 15  and knowledge-base ver- ification 26. Suppose we can infer that a query subexpression is guaranteed to be symmetric. Thus we can benefit from the proposed query optimization techniques of Section 3 even if we do not have any stored kernels in the database. query optimization has the goal to find the 'best' query execution plan among all possible plans and uses a cost model to compare different plans. Currently  , we support two join implementations: However  , it is important to optimize these tests further using compile-time query optimization techniques. Evaluating the query tests obviously takes time polynomial in the size of the view instance and base update. For optimization  , MXQuery only implements a dozen of essential query rewrite rules such as the elimination of redundant sorts and duplicate elimination. MXQuery does not have a cost-based query optimizer . Since OOAlgebra resembles the relational algebra   , the familiar relational query optimization techniques can be used. For OODAPLEX  , we had developed an algebra  , OOAlgebra   , as the target language for query compilation DAYA89 . SEMCOG also maintains database statistics for query optimization and query reformulation facilitation. The server functions are supported by five modules to augment the underlying database system multimedia manipulation and search capability. The most expensive lists to look at will be the ones dropped because of optimization. Terms with long inverted lists will therefore be examined last since the query terms are sorted by decreasing query weight. Second  , we describe a novel two-stage optimization technique for parameterized query expansion. As we show  , this framework is a generalization and unification of current state-of-the-art concept weighting 6  , 18  , 31 and query expansion 24  , 15 models. Similarly  , we weight the query terms according to whether they are sub-concepts or not. Similarly   , automatic checking tools face a number of semidecidability or undecidability theoretical results. Extended Datalog is a query language enabling query optimization but it does not have the full power of a programming language. After rewriting  , the code generator translates the query graphs into C++ code. In fact  , V represents the query-intent relationships  , i.e. , there is a D-dimensional intents vector for each query. To solve the optimization problem in 6  , we use a matrix V and let V = XA T . The conventional approach to query optimization is to pick a single efficient plan for a query  , based on statistical properties of the data along with other factors such as system conditions. 1 Suppose the following conditions hold for the example: This type of optimization does not require a strong DataGuide and was in fact suggested by NUWC97. For this query and many others  , such a finding guarantees that the query result is empty. In this case we require the optimizer to construct a table of compiled query plans. When query optimization occurs prior to execution  , resource requests must be deferred until runtime. Section 3.3 describes this optimization. In particular  , we may be able to estimate the cost of a query Q for an atomic configuration C by using the cost of the query for a " simpler " configuration C'. The optimizer's task is the translation of the expression generated by the parser into an equivalent expression that is cheaper to evaluate. For example  , V1 may store some tuples that should not contribute to the query  , namely from item nodes lacking mail descendants. Summary-based optimization The rewritten query can be more efficient if it utilizes the knowledge of the structural summary. Work on frameworks for providing cost information and on developing cost models for data sources is  , of course  , highly relevant. UFA98 describes orthogonal work to incorporate cost-based query optimization into query scrambling. Enhanced query optimizers have to take conditional coalescing rules into consideration as well. However restricting attention to this class of rules means not to exploit the full potential of query optimization. In this method  , subqueries and answers are kept in main memory to reduce costs. However  , a clever optimization of interpreted techniques known as query/sub-query has been developped at ECRC Vieille86 . This query is a variant of the query used earlier to measure the performance of a sequence scan. During execution of the SQL query  , the nested SE &UIN expression is evaluated just as any other function would be. Note  , however  , that the problem studied here is not equivalent to that of query containment. For an overview and references  , see the chapters on query optimization in MA831 or UL82. Well-known query optimization strategies CeP84 push selections down to the leaves of a query tree. The first one is about the consequences of these results for data fragmentation. It is important to understand the basic differences between our scenario and a traditional centralized setting which also has query operators characterized by costs and selectivities. In contrast to MBIS the schema is not fixed and does not need to be specified  , but is determined by the underlying data sources. In this paper  , we make a first step to consider all phases of query optimization in RDF repositories. We defined transformation rules on top of the SQGM to provide means for rewriting and simplifying the query formulation. Then  , we will investigate on optimization by using in-memory storage for the hash tables  , in order to decrease the query runtimes. the input threshold. The join over the subject variable will be less expensive and the optimization eventually lead to better query performance. Therefore  , a static optimizer should reverse the triple patterns. A set of cursor options is selected randomly by the query generator. Typically cursors involve different optimization  , execution and locking strategies depending on a variety of userspecified options. To improve the XML query execution speed  , we extract the data of dblp/inproceedings  , and add two more elements: review and comments. No optimization techniques are used. Copyright 2007 VLDB Endowment  , ACM 978-1-59593-649-3/07/09. Reordering the operations in a conventional relational DBMS to an equivalent but more efficient form is a common technique in query optimization. Reordering Boxes. We call this the irrelevant index set optimization. In this case  , the estimated cost for the query is the same as that over a database with no indexes. 19851. In general  , constraints and other such information should flow across the query optimization interfaces. This is more efficient because X is only accessed once. General query optimization is infeasible. Without this restriction  , transducers can be used for example to implement arbitrary iterative deconstructors or Turing machines. for each distinct value combination of all the possible run-time parameters. In principle  , the optimal plan generated by parametric query optimization may be different. Optimization of this query plan presents further difficulties. The DSMS performs only one instance of an operation on a server node with fewer power  , CPU  , and storage constraints. medium-or coarse-grained locking  , limited support for queries  , views  , constraints  , and triggers  , and weak subsets of SQL with limited query optimization. Many provide limited transaction facilities e.g. First  , expressing the " nesting " predicate .. Kim argued that query 2 was in a better form for optimization  , because it allows the optimizer to consider more strategies. The advantages of STAR-based query optimization are detailed in Loh87. In this example  , TableAccess has only two alternative definitions  , while TableScan has only three. Perhaps surprisingly  , transaction rates are not problematic. We used the same computer for all retrieval experiments. Using conditional compilation allows the compiler freedom to produce the most efficient code for each query optimization technique. 33  proposed an optimization strategy for query expansion methods that are based on term similarities such as those computed based on WordNet. al. In this section we evaluate the performance of the DARQ query engine. In this case DARQ has few possibilities to improve performance by optimization. The optimization of the query of Figure 1illustrated this. Inferred secondary orderings or groupings can be used to infer new primary orderings or groupings. Section 7 presents our conclusions  , a comparison with related work  , and some directions for future research. Section 6 compares query optimization strategies  , transformationfree with SA and II. The top layer consists of the optimizer/query compiler component. The knowledge gamed in performance tests can subsequently be built into optimization rules. The solution to this problem also has applications in " traditional " query optimization MA83 ,UL82. Database snapshots are another example of stored  , derived relations ALgO. But  , to our best knowledge  , no commercial RDBMS covers all major aspects of the AP technology. Some RDBMSs have means to associate optimization hints with a query without any modification of the query text. Fernandez and Dan Suciu 13 propose two query optimization techniques to rewrite a given regular path expression into another query that reduces the scope of navigation. They address the issue of equivalence decidability of regular path queries under such constraints. This query is optimized to improve execution; currently  , TinyDB only considers the order of selection predicates during optimization as the existing version does not support joins. The query is input on the user's PC  , or basestation.  For non-recursive data  , DTD-based optimizations can remove all DupElim and hash-based operators. Optimization of query plans using query information improves the performance of all alternatives  , and the addition of DTD-based optimizations improves them further. But  , the choice of right index structures was crucial for efficient query execution over large databases. Since query execution and optimization techniques were far more advanced  , DBAs could no longer rely on a simplistic model of the engine. For the purposes of this example we assume that there is a need to test code changes in the optimization rules framework. The query optimizer makes use of transformation rules which create the search space of query plan alternatives. It is important to point out their connection since semantic query optimization has largely been ignored in view maintenance literature. This is different from  , but related to  , the use of constraints in the area of semantic query optimiza- tion CGM88. The stratum approach does not depend on a particular XQuery engine. The advantage of this approach is that we can exploit the existing techniques in an XQuery engine such as the query optimization and query evaluation. Database queries are optimized based on cost models that calculate costs for query plans. , s ,} The problem of parametric query optimization is to find the parametric optimal set of plans and the region of optimality for each parametric optimal plan. Lack of Strategies for Applying Possibly Overlapping Optimization Techniques. Or for an XQuery that has nested subqueries  , a failed pattern in the inner query should not affect the computations in the outer query discussed more in Section 3.1. The query is interesting because it produces an intermediate result 1676942 facts that is orders of magnitude larger than the final results 888 facts. Note that the query is not optimized consecutively otherwise it is no different from existing techniques. The effect is equivalent to that of optimizing the query using a long optimization time. Learning can also be performed with databases containing noisy data and excep tional cases using database statistics. TTnfortllllat.ely  , query optimization of spatial data is different from that of heterogeneous databases because of the cost function. database systems e.g. , Dayal  , 19841 appears t ,o be ap plicahle to spatial query opt ,imizat.ion. That means the in memory operation account for significant part in the evaluation cost and requires further work for optimization. That effect is more considerable for the first query since that query will use larger memory. This is an open question and may require further research. Although this will eliminate the need for a probe query  , the dynamic nature of the switch operator provides only dynamic statistics which makes further query optimization very difficult. The Periscope/SQ optimizer rewrites this query using the algebraic properties of PiQA and cost estimates for different plans. Optimization is done by evaluating query fimess after each round of mutations and selecting the " most fit " to continue to the next generation. It then modifies queries by randomly adding or deleting query terms. The resulting megaplan is stored for subsequent execution by an extended execution engine. The rule/goal graph approach does not take advantage of existing DBMS optimization. Our aim is to eliminate this limitation by " normalixing " the query to keep only semantic information that is tmessay to evaluate the query. To select query terms  , the document frequencies of terms must be established to compute idf s before signature file access. When one uses the query term selection optimization  , the character-based signature file generates another problem. In the current version of IRO-DB  , the query optimizer applies simple heuristics to detach subqueries that are sent to the participating systems. Routines within Kleisli manage optimization  , query evaluation  , and I/O from remote and local data sources. CPL is implemented on top of an extensible query system called Kleisli2  , which is written entirely in ML 19.  the query optimization problem under the assumption that each call to a conjunctive solver has unit cost and that the only set operation allowed is union. In this case  , one could actually employ the following query plan: Most important is the development of effective and realistic cost functions for inductive query evaluation and their use in query optimization. Nevertheless  , there are many remaining opportunities for further research. We use a popular LDC shingle dataset to perform two optimizations. However  , we believe that the optimization of native SPARQL query engines is  , nevertheless   , an important issue for an efficient query evaluation on the Semantic Web. Clearly  , main memory graph implementations do not scale. Thus  , optimization may reduce the space requirements to Se114 of the nonoptimized case  , where Se1 is the selectivity factor of the query. In addition  , entries need only be made for tuples within the selectivity range of the query. the resulting query plan can be cached and re-used exactly the way conventional query plans are cached. Note that during optimization only the support structures are set up  , i.e. Those benefits are limited  , as in any other software technology  , by theoretical results.  Order-Preserving Degree OPD: This metric is tailored to query optimization and measures how well Comet preserves the ordering of query costs. Over-costing good plans is less of a concern in practice. We continue with another iteration of query optimization and data allocation to see if a better solution can be found. Apers and is optimal  , given the existing query strategies. While we do have some existing solutions  , these are topics that we are currently exploring further. The X-axis shows the number of levels of nesting in each query  , while the Y-axis shows the query execution time. The results with and without the pipelining optimization are shown in Figure 17. As these methods do not pre-compile the queries  , they generate call loops to the DBMS which are rather inefficient. 4  , 5 proposed using statistics on query expressions to facilitate query optimization. 15 only considers numeric attributes and selection on a single relation  , while our method needs to handle arbitrary attributes and multiple relations. This capability is crucial for many different data management tasks such as data modeling   , data integration  , query formulation  , query optimization  , and indexing. We have described GORDIAN  , a novel technique for efficiently identifying all composite keys in a dataset. Likewise query rewrite and optimization is more complex for XML queries than for relational queries. However  , deciding whether a given index is eligible to evaluate a specific query predicate is much harder for XML indexes than for relational indexes. We also briefly discuss how the expand operator can be used in query optimization when there are relations with many duplicates. We pick the Starburst query optimizer PHH92 and mention how and where our transformations can be used. Therefore  , many queries execute selection operations on the base relations before executing other  , more complex operations. In 13   , the query containment problem under functional dependencies and inclusion dependencies is studied. There has also been a lot of work on the use of constraints in query optimization of relational queries 7  , 13  , 25. In 22   , a scheme for utilizing semantic integrity constraints in query optimization  , using a graph theoretic approach  , is presented. Users do not have to possess knowledge about the database semantics  , and the query optimieer takes this knowledge into account to generate Semantic query optimization is another form of automated programming. Thus  , cost functions used by II heavily influence what remote servers i.e. However  , database systems provide many query optimization features  , thereby contributing positively to query response time. Compared with database based stores  , native stores greatly reduce the load and update time. The proposed method yielded two major innovations: inclusive query planning  , and query optimization. ACKNOWLEDGMENTS I am grateful to my supervisor Kalervo J~velin  , and to the FIRE group: Heikki Keskustalo  , Jaana Kekiilainen  , and others. We can see that the transformation times for optimized queries increase with query complexity from around 300 ms to 2800ms. shows the time needed for query planning and optimization transformation time. To reduce execution costs we introduced basic query optimization for SPARQL queries. Using service descriptions provides a powerful way to dynamically add and remove endpoints to the query engine in a manner that is completely transparent to the user. In query optimization mode  , BHUNT automatically partitions the data into " normal " data and " exception " data. We focus here on the direct use of discovered constraints by the query optimizer. Relational query optimization  , however  , impacts XQuery semantics and introduces new challenges. SQL Server 2005 also introduces optimizations for document order by eliminating sort operations on ordered sets and document hierarchy  , and query tree rewrites using XML schema information. In their relational test implementation they also consider only selection and join. On the other hand  , database systems provide many query optimization features  , thereby contributing positively to query response time. Compared with DBMS based systems Minerva and DLDB  , it greatly reduced the load time. We have generalized the notion of convex sets or version spaces to represent sets of higher dimensions. This includes the grouping specified by the group by clause of the query  , if any exists.  A thread added to lock one of the two involved tables If the data race happens  , the second query will use old value in query cache and return wrong value while not aware of the concurrent insert from another client. Set special query cache flags. The query cache is a common optimization for database server to cache previous query re- sults. Our experiments show that query-log alone is often inadequate  , combining query-logs  , web tables and transitivity in a principled global optimization achieves the best performance. Second  , the query-expansion feature used is in fact often derived from query co-clicks 13   , thus similar to our query log based positive signals. The well-known inherent costs of query optimization are compounded by the fact that a query submitted to the database system is typically optimized afresh  , providing no opportunity to amortize these overheads over prior optimizations . Concurrently  , the query feature vector is stored in the Query Cluster Database  , as a new cluster representative. The inclusive query planning idea is easier to exploit since its outcome  , the representation of the available query tuning space  , can also be exploited in experiments on best-match IR systems. The query optimization operation in the proposed form is restricted to the Boolean IR model since it presumes that the query results are distinct sets. But in parametric query optimization  , we need to handle cost functions in place of costs  , and keep track of multiple plans  , along with their regions of optimality  , for each query/subexpression. In a conventional optimizer we have a single value as the cost for an operation or a plan and a single optimal plan for a query/sub-query expression. At query execution time  , when the actual parameter values are known  , an appropriate plan can be chosen from the set of candidates  , which can be much faster than reoptimizing the query. For each relation in a query  , we record one possible transmission between the relation and the site of every other relation in the query  , and an additional transmission to the query site. This approach recognizes the interdependencies between the data allocation and query optimization problems  , and the characteristics of local optimum solutions. Query compilation produces a single query plan for both relational and XML data accesses  , and the overall query tree is optimized as a whole.  Set special query cache flags. The query cache is a common optimization for database server to cache previous query re- sults. This bug corresponds to mysqld-1 in Table 3  Enable the concurrent_insert=1 to allow concurrent insertion when other query operations to the same table are still pending. The query optimizer shuffles operators around in the query tree to produce a faster execution plan  , which may evaluate different parts of the query plan in any order considered to be correct from the relational viewpoint. As the accuracy of any query optimizer is dependent on the accuracy of its statistics  , for this application we need to accurately estimate both the segment and overall result selectivities. We develop a query optimization framework to allow an optimizer to choose the optimal query plan based on the incoming query and data characteristics. To control the join methods used in the query plans  , each plan was hand-generated and then run using the Starburst query execution driver. Figure 5shows the DAG that results from binary scoring assuming independent predicate scoring for the idf scores of the query in Figure 3. A simple way to implement this optimization is to convert the original query into a binary predicate query  , and build the relaxation DAG from this transformed query. Hence the discussion here outlines techniques that allow us to apply optimizations to more queries. Note that our optimization techniques will never generate an incorrect query — they will either not apply in which case we will generate the naive query or they will apply and will generate a query expected to be more efficient than the naive query. The conventional approach to query optimization is to examine each query in isolation and select the execution plan with the minimal cost based on some predcfincd cost flmction of I0 and CPU requirements to execute the query S&79. One thus needs to consider all query types together. In this section  , we discuss how the methods discussed to up to this point extend to more general situations. If alternative QGM representations are plausible depending upon their estimated cost  , then all such alternative QGMs are passed to Plan Optimization to be evaluated  , joined by a CHOOSE operator which instructs the optimizer to pick the least-cost alternative. QGM Optimization then makes semantic transformations to the QGM  , using a distinct set of sophisticated rewrite rules that transform the QGM query into a " better " one  , i.e. , one that is more efficient and/or allows more more leeway during Plan Optimization . Further  , the benefits of " plan hints "   , a common technique for influencing optimizer plan choices for specific queries  , automatically percolate to the entire set of queries that are associated with this plan. The optimization prohlem then uses the response time from the queueing model to solve for an improved solution. The Iirst part is the optimization just dcscrihcd which uses an assumed response time for each query type  , and the second part is a queueing model to solve for the rcsponse t.ime based on the access plan selections and buf ?%r allocation from the first part the optimization prohlcm. Yet another important advantage is that the benefits of " plan hints "   , a common technique for influencing optimizer plan choices for specific queries  , automatically percolate to the entire set of queries that are associated with this plan. As optimizers based on bottom-up Zou97  , HK+97  , JMP97 and top-down Ce96  , Gra96 search strategies are both extensible Lo88  , Gra95 and in addition the most frequently used in commercial DBMSs  , we have concentrated our research on the suitability of these two techniques for parallel query optimization. To overcome the shortcomings of each optimization strategy in combination with certain query types  , also hybrid optimizers have been proposed ON+95  , MB+96. In Tables 8 and 9 we do not see any improvement in preclslon at low recall as the optimization becomes more aggressive. Second  , at high recall  , precision becomes significant y worse as the optimization becomes more aggressive  , This is because we are not considering documents which have a strong combined belief from all of the query terms  , but lack a single query term belief strong enough to place the document in the candidate set. Once we have added appropriate indexes and statistics to our graph-based data model  , optimizing the navigational path expressions that form the basis of our query language does resemble the optimization problem for path expressions in object-oriented database systems  , and even to some extent the join optimization problem in relational systems. Statistics describing the " shape " of a data graph are crucial for determining which methods of graph traversal are optimal for a given query and database. In this paper  , we present a new architecture for query optimization  , based on a blackbonrd xpprowh  , which facilitates-in combination with a building block  , bottom-up arrscrnbling approach and early aqxeasiruc~~l. The search strategy-also proposed for multi query optimization 25-that will be applied in our sample optimizer is a slight modification of A*  , a search technique which  , in its pure form  , guarantaes to find the opt ,irnal solution 'LO. Although catalog management schemes are of great practical importance with respect to the site auton- omy 14  , query optimization 15  , view management l  , authorization mechanism 22   , and data distribution transparency 13  , the performance comparison of various catalog management schemes has received relatively little attention 3  , 181. Using the QGM representation of the query as input  , Plan Optimization then generates and models the cost of alternative plans  , where each plan is a procedural sequence of LOLEPOPs for executing the query. Ignoring optimization cost is no longer reasonable if the space of all possible execution plans is very large as those encountered in SQOS as well as in optimization of queries with a large number of joins. Conventional query optimizers assume that the first part is negligible compared to the second  , and they try to minimize only the execution cost instead of the total query evaluation cost. Some of the issues to consider are: isolation levels repeatable read  , dirty read  , cursor stability  , access path selection table scan  , index scan  , index AND/ORing MHWC90  , Commit_LSN optimization Mohan90b  , locking granularity record  , page  , table  , and high concurrency as a query optimization criterion. While it is sometimes merely a performance advantage to take such an integrated view  , at other times even the correctness of query executions depends on such an approach. The optimization techniques being currently implemented in our system are : the rewriting of the FT 0 words into RT o   , a generalization of query modification in order to minimize the number of transitions appearing in the query PCN  , the transformation of a set of database updates into an optimized one as SellisgS does  , and the " push-up " of the selections. -The optimizer can use the broad body of knowledge developed for the optimization of relational calculus and relational algebra queries see  JaKo85  for a survey and further literature. Therefore defining the semantics of an SQL query by translation into relational algebra and relational calculus opens up new optimization oppor- tunities: -The optimizer can investigate the whole query and is no longer constrained to look at one subquery at a time. Let us mathematically formulate the problem of multi-objective optimization in database retrieval and then consider typical sample applications for information systems: Multi-objective Retrieval: Given a database between price  , efficiency and quality of certain products have to be assessed  Personal preferences of users requesting a Web service for a complex task have to be evaluated to select most appropriate services Also in the field of databases and query optimization such optimization problems often occur like in 22 for the choice of query plans given different execution costs and latencies or in 19 for choosing data sources with optimized information quality. The optimization problem can be solved by employing existing optimization techniques  , the computation details of which  , though tedious  , are rather standard and will not be presented here. Note that we can use different feature sets for different query topics by using this method  , but for simplicity  , we didn't try it in this work. It is not our goal in this paper to analyze optimization techniques for on-disk models and  , hence  , we are not going to compare inmemory and on-disk models. Queries over Changing Attributes -The attributes involved in optimization queries can vary based on the iteration of the query. In a case where we want half of the participants to be male and half female  , we can adjust weights of the objective optimization function to increase the likelihood that future trial candidates will match the currently underrepresented gender. In this paper we present a general framework to model optimization queries. This makes the framework appropriate for applications and domains where a number of different functions are being optimized or when optimization is being performed over different constrained regions and the exact query parameters are not known in advance. As such  , the framework can be used to measure page access performance associated with using different indexes and index types to answer certain classes of optimization queries  , in order to determine which structures can most effectively answer the optimization query type. However  , if the optimal contour crosses many partitions  , the performance will not be as good. Each query was executed in three ways: i using a relational database to store the Web graph  , ii using the S-Node representation but without optimization  , and iii using S- Node with cluster-based optimization. To generate Figure 12b  , we executed a suite of 30 Web queries over 5 different 20-million page data sets. The purpose of this example is not to define new optimization heuristics or propose new optimization strategies. In this section we give a design for a simple query rewrite system to illustrate the capabilities of the Epoq architecture and  , in particular  , to illustrate the planning-based control that will be presented in Section 5. Formulation A There are 171 separate optimization problems  , each one identical to the traditional  , nonparametric case with a different F vector: VP E  ?r find SO E S s.t. In general  , for every plan function s  , 7 can be partiof parametric query optimization. However  , the discussion of optimization using a functional or text index is beyond the scope of this paper. For an XML input whose structure is opaque  , the user can still use a functional index or a text index to do query optimization. The leftmost point is for pure IPC and the rightmost for pure OptPFD. In fact  , this hybrid index optimization problem motivated the optimization problem underlying the size/speed tradeoff for OptPFD in Figure 2per query in milliseconds  , for a hybrid index involving OptPFD and IPC. In this paper we proposed a general framework for expressing and analyzing approximate predicates  , and we described how to construct alternate query plans that effectively use the approximate predicates. In addition to considering when such views are usable in evaluating a query  , they suggest how to perform this optimization in a cost-based fashion. Therefore  , we need to find a priori which tables in the FROM clause will be replaced by V. Optimization of conjunctive SQL queries using conjunctive views has been studied in CKPS95. The results also shows how our conservative local heuristic sharply reduces the overhead of optimization under varying distributions. The second set of experiments shed light on how the distribution of the user-defined predicates among relations in the query influences the cost of optimization. However   , the materialized views considered by all of the above works are traditional views expressed in SQL. Optimization using materialized views is a popular and useful technique in the context of traditional database query optimization BLT86  , GMS93  , CKPS95  , LMSS95  , SDJL96 which has been successfully applied for optimizing data warehouse queries GHQ95  , HGW + 95  , H R U96  , GM96  , GHRU97. Note that even our recipes that do not exploit this optimization outperform the optimized VTK program and the optimized SQL query. The bars labelled with the 'o' suffix make use of a semantic optimization: We restrict the grid to the relevant region before searching for cells that contain points. Some of the papers on query evaluation mentioned in section 4.2 consider this problem. It is an interesting optimization problem to decide which domains to invert a static optimization and how to best evaluate the qualification given that only some of the domains are inverted. Concerning query optimization  , existing approaches  , such as predicate pushdown U1188 and pullup HS93  , He194  , early and late aggregation c.f. , YL94  , duplicate elimination removal PL94  , and DISTINCT pullup and pushdown  , should be applied to coalescing. In terms of future research  , more work is needed to understand the interplay of coalescing and other temporal operators with respect to queSy optimization and evaluation. Putting these together   , the ADT-method approach is unable to apply optimization techniques that could result in overall performance improvements of approximately two orders of magnitude! Traditional query optimization uses an enumerative search strategy which considers most of the points in the solution space  , but tries to reduce the solution space by applying heuristics. As the solution space gets larger for complex queries  , the search strategy that investigates alternative solutions is critical for the optimization cost. We have chosen not do use dynamic optimization to avoid high overhead of optimization at runtime. one for each resolvent of a late bound function  , and where the total query plan is generated at start-up time of the application program. Our approach exploits knowledge from different areas and customizes these known concepts to the needs of the object-oriented data models. Using a realistic application  , we measure the impact of parallelism on the optimization cost and the op- timization/execution cost trade-off using several combinations of search space and search strategy. In this way  , after two optimization calls we obtain both the best hypothetical plan when all possible indexes are present and the best " executable " plan that only uses available indexes. For that reason  , we would require a second optimization of the query  , this time using only the existing indexes. We describe our evaluation below  , including the platform on which we ran our experiments  , the test collections and query sets used  , the performance measured. Any evaluation of an unsafe optimization technique requmes measuring the execution speeds of the base and optimized systems  , as well as assessing the impact of the optimization technique on the system's retrieval effectiveness. In the following  , we focus on such an instantiation   , namely we employ as optimization goal the coverage of all query terms by the retrieved expert group. Obviously  , by defining a specific optimization goal  , we get different instantiations of the framework  , which correspond to different problem statements. In this optimization  , we transform the QTree itself. Our ideas are implemented in the DB2 family. We performed experiments to 1 validate our design choices in the physical implementation and 2 to determine whether algebraic optimization techniques could improve performance over more traditional solutions. Since the execution space is the union of the exccution spaces of the equivalent queries  , we can obtain the following simple extension to the optimization al- gorithm: 1. Thus  , the ecectllion space consists of the space of all join trees* for each equivalent query obtainrtl from Step 1 of optimization Section 4. Although this approach is effective in the database domain  , unfortunately  , in knowledge base systems this is not feasible. This is necessary to allow for both extensibility and the leverage of a large body of related earlier work done by the database research community. Such machinery needs to be based on intermediate representations of queries that are syntactically close to XQuery and has to allow for an algebraic approach to query optimization  , with buffering as an optimization target. The second issue  , the optimization of virtual graph patterns inside an IMPRECISE clause  , can be addressed with similarity indexes to cache repeated similarity computations—an issue which we have not addressed so far. The first issue can be addressed with iSPARQL query optimization  , which we investigated in 2 ,22. The goal is to keep the number of records Note that optimizing a query by transforming one boolean qualification into another one is a dynamic optimization that should be done in the user-to- LSL translator. For instance: with 4 levels  , the corresponding SEQUIN query is PROJECT count* FROM PROJECT * FROM PROJECT * FROM 100K~10flds~100dens , S; ZOOM ALL; We disabled the SEQ optimization that merges consecutive scans which would otherwise reduce all these queries to a common form. Besides these works on optimizer architectures  , optimization strategies for both traditional and " nextgeneration " database systems are being developed. The technique provides optimization of arbitrary convex functions  , and does not incur a significant penalty in order to provide this generality. In summary  , navigation profiles offer significant opportunities for optimization of query execution  , regardless of whether the XML view is defined by a standard or by the application. We argue that complex view queries contain many such tradeoffs; balancing them is part of the optimization space explored by ROLEX. This example illustrates the applicability of algebraic query optimization to real scientific computations  , and shows that significant performance improvements can result from optimization. Finally  , the reduction in the number of merge operations from 3 to 2 results in less copying of data  , and thus better performance. However  , this only covers a special case of grouping  , as we will discuss in some detail in Section 3. Parallel optimization is made difficult by the necessary trade-off between optimization cost and quality of the generated plans the latter translates into query execution cost. To copy otherwire  , or to republish  , requires a fee and/or rpecial permirrion from Ihe Endowment. In Section 3  , we show how our query and optimization engine are used in BBQ to answer a number of SQL queries  , 2 Though these initial observations do consume some energy up-front  , we will show that the long-run energy savings obtained from using a model will be much more significant. We discuss this optimization problem in more detail in Section 4. The basic idea behind our approach is similar in spirit to the one proposed by Hammcr5 and KingS for knowledge-based query optimization  , in the sense that we are also looking for optimization by semantic transformation. Finally  , Hammer only supports restricted forms of logically equivalent transformations because his knowledge reprsentation is not suitable for deductive use. Other types of optimizations such as materialized view selection or multi-query optimization are orthogonal to scan-related performance improvements and are not examined in this paper. Exactly this type of optimization lies in the heart of a read-optimized DB design and comprises the focus of this paper. The horizontal optimization specializes the case rules of a typeswitch expression with respect to the possible types of the operand expression. The structural function inlining yields an optimal expression for a given query by means of two kinds of static optimization  , which are horizontal and vertical optimizations. This optimization problem is NP-hard  , which can be proved by a reduction from the Multiway Cut problem 3 . Then the optimization target becomes F = arg max F ∈F lF  , where F is the set of all possible query facet sets that can be generated from L with the strict partitioning constraint. What differentiates MVPP optimization with traditional heuristic query optimization is that in an MVPP several queries can share some After each MVPP is derived  , we have to optimize it by pushing down the select and project operations as far as possible. The relation elimination proposed by Shenoy and Ozsoyoglu SO87 and the elimination of an unnecessary join described by Sun and Yu SY94 are very similar to the one that we use in our transformations. 11 ,12 a lot of research on query optimization in the context of databases and federated information systems. The introduction of an ER schema for the database improves the optimization that can be performed on GraphLog queries for example  , by exploiting functional dependencies as suggested in 25  , This means that the engineer can concentrate on the correct formulation of the query and rely on automatic optimization techniques to make it execute efficiently. For practical reasons we limited the scalability and optimization research to full text information re-trieval IR  , but we intend to extent the facilities to full fledged multimedia support. Distribution and query optimization are the typical database means to achieve this. This study has also been motivated by recent results on flexible buffer allocation NFSSl  , FNSSl.